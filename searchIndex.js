
	/*
	 * This file was automatically generated by fixie.
	 * It contains a JavaScript array with the information to be passed to Lunr
	 * (https://lunrjs.com/) to provide a search feature via JavaScript.
	 */
	var searchDocuments = [{
		"id": "/404",
		"name": "Oops",
		"text": "oops whatever page you were looking for was not found. feel free to contact me at hector@hectorcorrea.com mailto:hector@hectorcorrea.com and ask the that originally. probably still exists but i did redirect it properly when migrated this site its current home. sorry about ------------------ oo / ----w"
	},{
		"id": "/about",
		"name": "About",
		"text": "about i am a software developer in hartford ct. this site is where host my blog /blog and post materials related to presentations workshops /presentations . have been for many years. since 2014 focus has on ruby rails applications academic libraries with strong indexing searching data through apache solr institutional repositories. img style float:right alt src /public/hectorcorrea.jpg / currently work at the princeton university library as part of team that develops manage curation code https://github.com/pulibrary/pdc describe discovery research https://datacommons.princeton.edu/discovery/ discovery/ from 2016 2020 worked brown several projects https://github.com/brown-university-library/bul-search profiles https://vivo.brown.edu/ https://github.com/brown-university-library/vivo-on-rails archives https://www.riamco.org/ https://github.com/brown-university-library/riamco most these were using some them blacklight others straight through. penn state development scholarsphere https://scholarsphere.psu.edu/ 39 s repository https://github.com/psu-stewardship/scholarsphere before was heavily involved microsoft stack c# asp.net mvc sql server building complex high-volume variety industries. main areas interest are web small collaborative teams. also enjoy learning new interesting technologies you ll find wide topics including algorithms structures go node.js/javascript c#/asp.net nosql databases linked general. hold bachelor science computer instituto tecnol√≥gico de colima mexico certifications certified mcsd scrummaster scrum product owner mongodb developers m101p last few years ve given local events well regional national conferences node.js nosql/mongodb marc repositories sustainable development. check out slides other tab. getting touch feel free browse around contact me hector@hectorcorrea.com mailto:hector@hectorcorrea.com if any questions or comments. can on: class sociallogo /public/github.svg github https://github.com/hectorcorrea /public/rss.svg rss feed blog/rss /public/stackoverflow.svg stackoverflow https://stackoverflow.com/users/446681/hector-correa /public/mastodon.svg mastodon https://mastodon.social/@hectorjcorrea"
	},{
		"id": "/index",
		"name": "Welcome",
		"text": "welcome i am hector correa a software developer in hartford ct. this site is where host my blog /blog and post materials related to presentations workshops /presentations . main areas of interest are web development small collaborative teams. also enjoy learning new interesting technologies you ll find wide variety topics including algorithms data structures go ruby on rails node.js/javascript solr c#/asp.net mvc nosql databases linked general. feel free browse around contact me at hector@hectorcorrea.com mailto:hector@hectorcorrea.com if have any questions or comments."
	},{
		"id": "/presentations",
		"name": "Presentations and workshops",
		"text": "presentations and workshops a selected list of that i ve given over the years. web development in nutshell https://github.com/hectorcorrea/webdev-nutshell workshop presented during wintersession 2025 at princeton university. solr for newbies https://github.com/hectorcorrea/solr-for-newbies code4lib 2018 2019 2023. beyond buzzwords: agile collaboration rejecting perfectionist mindset https://doi.org/10.5281/zenodo.15758535 presentation open repositories chicago il with kate lynch hannah hadley building services long haul data commons https://doi.org/10.17605/osf.io/abnh4 rdap summit unboxing repository model https://hectorcorrea.com/downloads/2023-dlf-out-of-the-box.pdf dlf forum 2023 st. louis mo marcli https://github.com/hectorcorrea/marcli lightning talk 2021 on tool to process marc files indexing searching chinese japanese korean text https://hectorcorrea.com/downloads/2020-indexing-cjk.pdf vufind 2020 how index cjk driven https://hectorcorrea.com/downloads/2019-collaboration-driven-development.pdf nercomp annual conference providence ri jeanette norris new frontend vivo https://hectorcorrea.com/downloads/2017-vivo-new-frontend.pdf 2017 york ny steven mccauley build your own software yes it https://hectorcorrea.com/blog/2017-03-15/build-your-own-software los angeles ca introduction linked platform https://hectorcorrea.com/downloads/introduction ldp.pdf hydra connect 2015 minneapolis mn node.js https://hectorcorrea.com/downloads/intro-to-nodejs.pdf 2013 penn state college pa. intro nosql databases mongodb https://hectorcorrea.com/downloads/2013-introduction-to-nosql-mongo.pdf pittsburgh tech fest pa"
	},{
		"id": "/search",
		"name": "Search",
		"text": "search"
	},{
		"id": "/solr-for-newbies",
		"name": "Solr for Newbies",
		"text": "solr for newbies all the materials this workshop are available at https://github.com/hectorcorrea/solr-for-newbies"
	},{
		"id": "/tooling",
		"name": "Tooling",
		"text": "tooling the site is hosted in github pages as a statically generated website. repository https://github.com/hectorcorrea/hectorcorrea.github.io below are some of tools that i use to build it. fixie https://github.com/hectorcorrea/fixie generate html from markdown files. css for comes new.css https://newcss.net/ search implemented with lunr.js https://lunrjs.com/ and highlighting done via mark.js https://markjs.io/"
	},{
		"id": "/webdev-nutshell",
		"name": "Web Development in a Nutshell",
		"text": "web development in a nutshell all the materials for this workshop are available at https://github.com/hectorcorrea/webdev-nutshell"
	},{
		"id": "/blog/2024-11-04/us-research-software-engineering-24",
		"name": "US-RSE-24",
		"text": "us-rse-24 posted on 2024-11-04 last month october/2024 i attended the us research software engineering 2024 https://us-rse.org/usrse24/ conference that took place in albuquerque nm. this post is a summary of what learned during event. although am not engineer rse per-se most projects involved at work are related to developing infrastructure support data. so when year started hearing rumblings about conferences got bit curious and decided attend one us. range topics was very interesting there were sessions best practices for project management remote working user experience accessibility role ai on. full program can be found https://us-rse.org/usrse24/program/ slides some available https://zenodo.org/communities/usrse24 why do we need from understand someone who works group significant part their job involves software. kind common large institutions national laboratories around world. concept something 2013 uk has continued evolving ever since. society https://society-rse.org/about/history/ website provides good overview history movement. his keynote simon hettrick https://slides.com/simonhettrick/usrsecon24 talked colossal demand standardize role. he mentioned study which they out 400 development postings 200 different titles. concluded standardizing naming these roles will beneficial community as it make more obvious how much skills needed across all kinds labs. hard come up with single name but after deliberation settled moved challenges people face neither recognized nor valued nearly other outputs since publications by important measurement somebody s success /9/3/1 . even though integral takes an incredible amount effort develop don t get recognition deserve. https://society-rse.org/ phrases it: founded belief world relies must recognise it. our mission establish environment recognises vital research. increase everyone promote collaboration between researchers experts creation academic career path engineers. personally have been developer my whole life taken surprise recognize writing mean paid me things became sandra gesing https://us-rse.org/usrse24/program/keynotes/ made clear her developers category because typically trained despite fact big e.g. might phd astrophysics rather than degree computer science addition write requires them advanced domain specific knowledge hence many phds fields heard sorts scenarios situations example supports results paper published authors. lack translates into getting promoted or hired under turn forces leave field. keep mind specialized losing loss institution well individual. another insight gained domains used teams recognizing i.e. easy sell multiple collaborators whereas tend alone integrating contributions mostly writes tends harder thing sell. session rses domain-specific ecosystems https://us-rse.org/usrse24/program/bofs/ bofs-1b presented julia damerow rebecca sutton koeser laure thompson jeri e. wierenga elaborated this. renee hui xin ng three series 1 https://www.linkedin.com/posts/nghuixin usrse24-usrse24-ismb-activity-7252514948843462656-ks6q 2 usrse24-activity-7252875305160200192-dbsw/ 3 usrse24-activity-7253592127446626304-2nve thoughts conference. worrisome signs enjoyed really hope movement improves careers particularly those currently being left due way reward system institutions. two worried though. first gender balance. felt had significantly higher number men vs women attendance. exact numbers would guess 60/40 maybe higher. field terrible record comes welcoming efforts bring does result only benefiting teams. should clarify thought itself then again man view here skewed. second typical perfect solution things. worry try adopt so-called created developed corporate blindly new entirely dynamics. similarly also see value seeing valuing bigger picture technology studies sts recommends https://digitalsts.net/ address politics technical scientific decision making encoraging sign point impression starting importance having stable team ditching mentality you just replace programmer another. closing lot. take next philadelphia https://us-rse.org/usrse25/ if interested."
	},{
		"id": "/blog/2024-09-12/computer-museum-valencia",
		"name": "Computer Museum (Valencia)",
		"text": "computer museum valencia posted on 2024-09-12 earlier this month i visited the of informatics school universitat polit√®cnica de val√®ncia https://museo.inf.upv.es/en/el-museo/ which has a nice collection older equiment including mainframes from 60s microcomputers 70s early personal computers late and 80s few other interesting exhibits here there. is housed by university as part it s not typical in sense that are located all throughout halls rather than dedicated room. most within same buiding though. september before classes start were empty so had place to myself but suspect experience different when session packed. first thing saw entered was massive mainframe. don t remember exact model one think an ibm system/370 or something like that. do thinking machine very close what fred brooks designing he wrote mythical man-month. these machines still talked about started college never really used anything this. mainframe https://hectorcorrea.com/images/val-mainframe.jpg for me given they reminded much actually teenager middle high school. below picture commodore 64 probably ever used. if correctly didn come with monitor instead you hooked them up tv storage via cassette tapes. basic programming language available them. name how ram had: kb. https://hectorcorrea.com/images/val-commodore64.jpg there section video games also found despite fact am gamer have little interest . at highlighted reasons made its way into peoples homes https://museo.inf.upv.es/en/microinformatica/ : new designed 8-bit architecture will find videogame sector ideal field offer consumer amusement product though always disguised tool future. however connection between videogames home only did prevent drive computing became main reason demand explosion development products finally led final implementation just we know today. game console https://hectorcorrea.com/images/val-micro1.jpg https://hectorcorrea.com/images/val-micro2.jpg more business class several captured era grew in. example system/23 datamaster kind computer. see lot notice came intel 8085 processor 256 kb four times above https://hectorcorrea.com/images/val-datamaster.jpg two classical pcs 80s. 5 -inch floppy second 3 drive. modern look smaller bigger comes mouse cases out metal heavy sturdy...and those keyboards pc https://hectorcorrea.com/images/val-pc-ibm1.jpg https://hectorcorrea.com/images/val-pc-ibm2.jpg owned original since too expensive. brand my it. drives. clone https://hectorcorrea.com/images/val-pc-clone.jpg memories opening add fudging switches tell a: b: eventually added hard-drive now c: software another showing training manuals eras. couple pictures get boxes sometimes buy right size box include both formats operating systems https://hectorcorrea.com/images/val-software-os.jpg borland https://hectorcorrea.com/images/val-software-lang.jpg after next turbo pascal warmed heart represented although forgotten big time. bits en femin√≠ while installation showcasing role women science. designers piece describe web site https://museo.inf.upv.es/en/bits-en-femenino-2/ graphic project some important world known tribute highlighting their contributions professional achievements. through advance female sectors continues be affected gender gap science becomes visible. elaboration been possible expand our network knowledge relation inspired life trajectory protagonists mural intention encourage participation equal terms especially related technology. knew work particularly lovelace hopper hamilton perlman many heard of. great learning experience. femini https://hectorcorrea.com/images/val-bitsfemini.jpg speaking highly recommend book broad band: untold story who internet claire l. evans. writting fascinating stories. interested stuff post paris https://hectorcorrea.com/blog/2008-09-03/computer-museum-paris recently learned sadly closed."
	},{
		"id": "/blog/2023-10-18/fixie",
		"name": "fixie",
		"text": "fixie posted on 2023-10-18 a few weeks ago i wrote little program called to help me migrate my personal website be served via statically generated pages. is similar other static site generators like hugo https://gohugo.io/ or jekyll https://jekyllrb.com/ : you give it bunch of markdown files and produces the html pages with content those files. but has zero customization options well not very - hence name https://en.wikipedia.org/wiki/fixed-gear bicycle . basics let s say that have two about.md index.md in your current folder. if run folder will create about.html index.html version processes all directory anything underneath. so there file under ./help/how-to.md also processed corresponding ./help/how-to.html at its core does can customize bit. styling layout.html use this as base creating contact.md normal skeleton header styles footer javascript used for expected include token somewhere body inside div replaced each generated. given process follows: 1. read 2. 3. replace 4. save blog entries created which really result built-in provisions basic web site. any ./blog considered entry. these file: ./blog/2021-12-20/static-sites.md ./blog/2021-12-20/static-sites.html using file. are several goodies happen entries: filename path date form yyyy-mm-dd e.g. 2021-12-20 example above was posted. first line starts sites cool title otherwise title. an extra ./blog/index.html listed grouped by year most recent entry first. uses same rest except automatically list entries. xml ./blog/rss.xml rss feed need manually reference want link them from add links one things next because data previous kept metadata separate do go poking around source code ll notice just ignore it. local server sometimes nice preview before push actual particularly tweaking layout. -server default available http://localhost:9001 keep mind actually host detect changes regenerate i.e. support hot reload make stop rerun regenerates html. getting started download executable https://github.com/hectorcorrea/fixie/releases command curl: curl -lo https://github.com/hectorcorrea/fixie/releases/latest/download/fixie chmod u x once machine sure some optionally below steps sample files: echo hello world home page about now ./fixie gear generator no layout ./layout.html found processing .md files... ./blog/ were how reports again should newly ls point running pointing browser might noticed reported found. we following special /header /div /footer see both likewise when ran our don t recognized interested find https://github.com/hectorcorrea/fixie am produce check out https://hectorcorrea.com/blog/2023-10-17/static-generated-site more information why did github"
	},{
		"id": "/blog/2023-10-17/static-generated-site",
		"name": "Static Generated Site",
		"text": "static generated site posted on 2023-10-17 earlier this month i migrated my personal at https://hectorcorrea.com to be hosted as a statically set of html pages github pages. post elaborates why and how did it. recently have been interested in much we can achieve the web with just basics css javascript keeping tradition trying things decided convert see well idea works practice. previous version was served via small go program running linux machine digital ocean. 2017 blogged about setup https://hectorcorrea.com/blog/2017-01-18/migrating-my-site-from-node-js-to-go am really impressed low key maintenance that approach for 6 years. initial stored its content blog entries mysql database. one point 2022 changed it store markdown files render those runtime. liked having plain text like blog. could easily edit any editor navigating through all also straightforward. going since already switching not big leap. thought using something hugo or jekyll parse generate content. but code write tool do job me. so s what did. wrote little parses generates each them. given use mostly has logic specific an index list grouped by year rss feed consumed readers. is called fixie available https://github.com/hectorcorrea/fixie . hosting initially when first create intending same ocean serve apache. however converting dawned me host https://pages.github.com/ which cool kids are doing these days. never new territory documentation fantastic didn t take long push repository directly. great instructions configure dns https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site original url https://hectocorrea.com bit tricky because super comfortable process smooth be. legacy redirects time rewrite over years structure urls entries. every change tried make sure links redirected properly urls. done relatively want lose functionality version. relational database backend used include record id say /blog/hello-world/10 switched replaced date sequence number matched file disk /blog/hello-world/2012-09-02-00028 keep bad changing again move closer front drop now looks /blog/2012-09-02/hello-world handling easy inject analyze handle differently ahead come up solution accounts stub files. example two /blog/hello-world/10.html /blog/hello-world/2012-09-02-00028.html tell browser redirect user url: head meta http-equiv refresh 0 / /head way if somebody goes will found send known redirection https://developer.mozilla.org/en-us/docs/web/http/redirections redirections disadvantage there lots extra repo i.e. they contain no real only least guess ll live this. update january/2024: had interesting case .aspx page link from back written c#. seems wikipedia references /blog/the-mythical-man-month.aspx made sense supporting link. mentioned above extension ended adding some layout very case. // hande does let due window.location.pathname window.location https://hectorcorrea.com/blog/2007-06-28/the-mythical-man-month automatically loads 404.html everytime visits exist renders proper http response status 404 nice. you customize your users whatever uses. think most out unfortunately knowing report often rendered today still few broken images download fix next source err https://github.com/hectorcorrea/hectorcorrea.github.io includes redirection."
	},{
		"id": "/blog/2022-11-12/migrating-to-mastodon",
		"name": "Migrating to Mastodon",
		"text": "migrating to mastodon posted on 2022-11-12 is an open source project with the goal of providing a platform create decentralized social networks. started in 2016 as open-source by eugen rochko who avid user since 2008 was dissatisfied state and direction twitter. believing that instant global communications were too crucial for modern society belong single commercial company he sought build user-friendly microblogging product would not any central authority but remain practical everyday use. - https://joinmastodon.org/about creating media something aligns my idea web previous two attempts at joining disappointing i had hard time finding people follow site felt like empty warehouse little offer. this month massive twitter migration https://www.msn.com/en-us/news/technology/considering-joining-the-twitter-migration-check-out-these-platform-alternatives/ar-aa13nzlw it looks things are starting turn around amount posting interesting stuff has grown exponentially makes me optimistic about it. just one many projects promotes participate federated universe fediverse https://en.wikipedia.org/wiki/fediverse which users from different products can communicate each other here very short video https://framatube.org/w/4294a720-f263-4ea4-9392-cf9cea4d5277 explains basic . again conceptually how our use evolve practice achieve we collectively tend revert back centralized proprietary solutions e.g. email control networks -- martin fowler elaborates rather eloquently https://martinfowler.com/articles/exploring-mastodon.html what-if-twitter-goes-myspace let s hope online prevails interface exclusively through website. find website be responsive works well both desktop mobile browsers. keeps track three timelines: home local federated. timeline displays posts follow. where spend most time. shows instance account lives case mastodon.social post instances. general only care am following also include boosted retweeted lingo nice thing timelines always chronological order there no advertising so predictable decided browse see if might interested want rarely really care. drinking fire hose never know what going out. part uninteresting don t often. did changed few defaults settings profile they minimal: default theme seems dark i.e. black background switched mine light white turned slow mode refreshes new come along found jumping much. does automatically refresh instead banner top tells x items click when new. advanced you view more than same via columns. think off thank goodness seem remember instances tried before prefer simplicity building network read mostly glorified rss reader. engage deep conversations. mean conversations large majority browsing good form blogs articles or references sources. lot used have moved easy notice because their accounts process bit challenging everybody instance. example hosted code4lib.social hachyderm.io digipres.club name few. however once somebody regardless them interact your work look usually handle somewhere after them. been ad-hoc. others check out those interesting. tools help migrate doing manually. suspect way similar interests narrow focus giant all-purpose kind me. far concerned toots revolve software development https://mastodon.social/@hectorjcorrea big fan adding hashtags important given distributed nature believe search feature searches within federated...or that. overall first impressions said twitter: such place now moving actively posting. advertising. content ad. mentioned chronological. algorithm behind scenes trying guess should promote engagement attract advertisers. great benefit approach timeline. will exact spot chronologically surrounded last next looking frustrated could kept changing post. including located struggled earlier keep up influx users. sites times unavailable respond delayed show content. understandable give been. tell normal stable again. person organization corporation facebook. ggmbh https://mastodon.social/about non-profit germany individuals. principles able another. even options accomplish this. understand perfect tooling already better privacy code conduct independent its own conduct. means trusting individual data agreeing enforce. theory model hosting set rules noted ro https://ubiqueros.com/notes/97fl43rhnu highlighted chanda prescod-weinstein experience https://twitter.com/ibjiyongi/status/1590462702983720962 still wondering long term sarah t. roberts https://www.behindthescreen-book.com/ points moderation problem tech-only solution. meantime ve deactivated @hectorjcorrea@mastodon.social"
	},{
		"id": "/blog/2022-08-30/i-can-t-believe-it-can-sort-visualized",
		"name": "I can't believe it can sort - visualized",
		"text": "i can t believe it sort - visualized posted on 2022-08-30 a few months ago came across paper titled is this the simplest and most surprising sorting algorithm ever https://arxiv.org/abs/2110.01111 by stanley p. y. fung in which he presents an incredibly simple entire code just 4 lines of code: for 1 to n do j if then swap that s algorithm. as indicates at first glance looks like cannot possible work e.g. comparison wrong but you try ll notice indeed correct. also not efficient any stretch imagination shouldn be used example introduce students. yet points out appealing thing about may its simplicity terms symmetry two loops . when saw had myself make sure does since there seems no intuition behind correctness entirely obvious below implementation javascript arrays are zero-based : 0 tmp course works. despite clear explanation couldn quite understand mechanics so decided create sample program visualize execution. how each elements array shifted executes with input 10 5 99 7 initial data: -- ---------- ------ ------------- false 2 true 3 final numbers underscores ones were iteration one things without logic performs different phases: select maximum phase insertion phase. executed am using indexes selects number moves front see table above resulting being value our array. fact lowest counter intuitive next takes care it. rest execution or works similar https://en.wikipedia.org/wiki/insertion insertions happen little sorts shifting elements. closer until gets form want yourself html https://hectorcorrea.com/demos/i-cannot-believe-it-can-sort.html use data behaves. source available here https://gist.github.com/hectorcorrea/7332762794a3370a4722fe5c3dceaf0a update september 2022: has page comments criticism https://www.cs.le.ac.uk/people/pyfung/sorting.html gotten interesting worth reading have made far."
	},{
		"id": "/blog/2021-12-13/log4shell-and-solr",
		"name": "Log4Shell and Solr",
		"text": "log4shell and solr last week the disclosure of vulnerability https://www.lunasec.io/docs/blog/log4j-zero-day/ took many us users by surprise. when i first heard about it didn t pay much attention to since figured that problem was somebody had found how leak information into log files something is bad but has limited exposure. however one my colleagues pointed out allowed for remote code execution rce indeed scary. as turns log4j library uses can be configured insert certain dynamic tokens these allows connect a server download execute it. am not java developer so this news me got curious see works in practice. installation triggered user submitting search via our application. if submits query logged correct syntax trigger expansion then they vulnerability. surprisingly easy do. demonstrate blog post using 8.7.0 with default logging settings there are versions affected https://solr.apache.org/security.html apache-solr-affected-by-apache-log4j-cve-2021-44228 leaking logs simple way triggering behavior your local issuing command like this: curl http://localhost:8983/solr/demo1/select q sys:user.home parameter url what causes information. case will name running under. you validate looking at file cat ./solr-8.7.0/server/logs/solr.log include line following information: 2021-12-13 20:53:12.984 info qtp1845623216-26 x:demo1 o.a.s.c.s.request demo1 webapp /solr path /select params /users/correah hits 0 status qtime notice expanded solr. values supported https://logging.apache.org/log4j/2.x/manual/configuration.html propertysubstitution knows process believe known property substitution world. special token passed on mean say very application pretty reason scary because substitutions supports host piece means through proper website controlled could force servers. possible recognizes indicate server. done jndi prefix. instead passing we did before pass invokes have host. example let s jndi:ldap://127.0.0.1:9000/hello-world shown below: port 9000 ldap any machine indicates string folks fastly great explanation practice https://www.fastly.com/blog/digging-deeper-into-log4shell-0day-rce-exploit-found-in-log4j reaching hard connecting issue string. looks innocent as-is i.e. does look anything : 21:17:49.801 qtp1845623216-22 400 able write little tiny tcp node.js 127.0.0.1:9000 . wrote listed // tcpserver.js an over tcp. always returns hello disconnects. test with: telnet localhost or nc var net require net.createserver server.on connection function socket show connected. now new date console.log from: now.toisostring socket.remoteaddress socket.remoteport send back disconnect. socket.write r n socket.destroy started listener port: server.listen run node again terminal: port:9000 2021-12-13t21:34:53.338z ::ffff:127.0.0.1:55748 detected from result attempting make ldap://127.0.0.1:9000/hello-world connection. return just crafting terms. understand prefix kind communications protocols https://stackoverflow.com/questions/4365621/what-is-jndi-what-is-its-basic-use-when-is-it-used dns http. client disconnects real fully exploit indicated post. linux use ncat https://nakedsecurity.sophos.com/2021/12/13/log4shell-explained-how-it-works-why-you-need-to-know-and-how-to-fix-it/ connections taking place showed here. instead: -k -vv -c echo ---connection --- 1 2 -l fix apache released start dlog4j2.formatmsgnolookups true setting reach receives below parameter: opts -dlog4j2.formatmsgnolookups ./solr screenshots shows confirm log4j2.formatmsgnolookups https://hectorcorrea.com/images/solr formatmsgnolookups.jpg keep mind still takes hosts."
	},{
		"id": "/blog/2021-11-16/solr-debugquery",
		"name": "Solr debugQuery",
		"text": "solr debugquery is a parameter that we can pass to when submitting query with this will include extra information in the response useful troubleshoot variety of issues queries. returned helpful diagnose: how interpreting search why particular document was included or not result set some documents are ranked higher than others available admin screen https://hectorcorrea.com/images/solr debug query.jpg on url like would any other parameter: curl http://localhost:8983/solr/your-core/select q request an attribute about raw received parsed explanation each were scored and few pieces information. node looks more less this: : rawquerystring querystring parsedquery ... tostring explain - what does our let s say do very simple solr: blue . brand new core no customizations output show something text :blue qparser luceneqparser notice term passed but indicates searching field. also using default parser. now instead against has been configured solrconfig.xml use fields qf edismax parser case same might look disjunctionmaxquery title txt:blue 10.0 author extendeddismaxqparser although still value clearly tells us txt field boost factor 10 see it aka rather standard lucene helps working multi-words searches i run for sky indicate following: :sky shows searched certainly wanted because did wrap terms quotes. if quotes: txt: produce one shown below which wanted: phrasequery treating named en configuration ending through transformations specific english language en:running provide following output: en:run stem i.e. running applied. another includes property. property explaining score these calculated. example en:blue 00012393 ton goes here 00002135 00011405 00008465 00011495 00022192 00009343 00010956 00011520 00009331 brevity ve omitted actual data just indicated ids: 3.8011298 weight 5842 schemasimilarity of: freq 1.0 computed as ast idf tf from: 6.1900153 log 1 n 0.5 / 20 number containing 10000 total 0.61407435 k1 b dl avgdl occurrences within 1.2 saturation 0.75 length normalization 2.0 5.48 average you section pretty hard decipher important highlight wealth trying understand given way was. blogged details understanding scoring https://library.brown.edu/create/digitaltechnologies/understanding-scoring-of-documents-in-solr/ want it. format long line-delimited string. newer versions have additional debug.explain.structured true allows json suitable parsing. according documentation https://solr.apache.org/guide/8 9/common-query-parameters.html debug-parameter several options kind interested: timing results all. original preserved backwards compatibility equivalent all explainother interested explainother-parameter force them even they gives almost id 00000747 first though meets criteria id:00000747 be output. otherquery infomation ids therefore response."
	},{
		"id": "/blog/2021-10-04/string-encoding-in-ruby-and-json-generate",
		"name": "String encoding in Ruby and JSON.generate()",
		"text": "string encoding in ruby and json.generate last week at work we ran into an interesting issue. the gist of problem is that had a was valid but threw exception when used it call to . below simplified version this scenario: text x81ru hash language ... json::generatorerror source sequence illegal/malformed utf-8 puts ru nil notice how accepts i am able use then throws tries it. if print console with output which already suspicious beginning. something amiss what why can pass around error digging issue reported makes clear itself says malformed looking for information about post guide https://tenderlovemaking.com/2020/01/13/guide-to-string-encoding-in-ruby.html by aaron patterson helped me get better understanding problem. one things separate property string. array bytes object related s possible have strings i.e. assigned wrong encoding. provides some helpful methods dig further its method example checks against current reports whether or not. our problematic reported: text.encoding encoding:utf-8 text.valid false as see default particular not utf-8. fact are explains incorrect were like inside more on good design reviews other handle encodings strings. so now know store around. piece puzzle find out does throw my guess somehow making sure since isn t exception. force similar identical following code: text.encode ascii encoding::invalidbytesequenceerror x81 found original code. seems code relies c https://github.com/ruby/ruby/blob/d92f09a5eea009fa28cd046e9d0eb698e3d94c5c/ext/json/generator/generator.c#l140-l143 make before using familiar take grain salt."
	},{
		"id": "/blog/2021-08-26/document-body-innerhtml-woes",
		"name": "document body innerHTML woes",
		"text": "document body innerhtml woes today i ran into an issue setting the value of document.body.innerhtml that caught me by surprise. have always known can set html fragment to and rendering engine browser usually does right thing renders it correctly. you even pass a malformed makes pretty good guesses parses but used caused parse in way had confused for while. what was worse is properly formed turns out incomplete parsed all wrong. below example knows how parse: p hello b world /b /p console.log notice there no head or tag yet this test opening new window then inspect page on console type line above. examples post print via assigned rather than relying displays immediately after assignment. important because could be different from given since before assigning it. mdn documentation https://developer.mozilla.org/en-us/docs/web/api/element/innerhtml says subject: removes element s descendants replaces them with nodes constructed parsing string htmlstring. now let see happens if use fragment. replaced span left closing did not include /span tag. case smart will correctly were something similar this: eventually includes proper tags ditches extra guess job. argue make choice reasonable. problematic while dealing part table strange has perfectly valid explanation. simplified version had: just one row two columns. instead tbody real behind my problem: tr td 1 colum /td column 2 /tbody know do discarded preserved tags. resulted very intended needed javascript against dom big problem. plus much bigger made problem harder spot resulting looks ok at first glance. started would heck added missing don t put it: /table /tr moral story sure assign as expect."
	},{
		"id": "/blog/2021-03-09/tiny-container",
		"name": "Tiny Container",
		"text": "tiny container a few weeks ago i read the book linux containers and virtualization - kernel perspective https://www.apress.com/gp/book/9781484262825 by shashank mohan jain was fascinated example that he provides on how to build your own from scratch in go. this blog post replicate part of code mr. presents but tweaked it run its shell rather than having download separate set libraries web . my version only supports functionality show isolation file system whereas original shows provide network memory isolation. examples created are available at https://github.com/hectorcorrea/tiny-container tinycontainer.go is copy provided as mentioned above. tinyshell.go program emulate commands typical like cat cd env ls hostname so we can test provides. should point out am newbie when comes stuff calls topic way league. please feel free reach if got some concepts wrong or they could use better explanation. what anyway although have heard were feature exposure them had been through third-party tools docker. s good introduction supported itself many features configure them. one things points virtual machines technique. virtualize complete instruction architecture i.e. whole machine much lighter technique creates isolated sections within operating system. says: container-based doesn t abstract hardware uses techniques isolate access paths for different resources. carves logical boundary same an get root process tree subsystem on. according made three primitives: namespaces which controls visibility allows sandbox programs running inside container. there types each parts ids pid mounts access. control groups aka cgroups used cpu disk utilization layered systems allow degree sharing files between host creating with go two post: bulk lives defines properties. little emulates interact once has created. you want execute these follow steps compile it. terminal git clone https://github.com/hectorcorrea/tiny-container.git tiny-container goos -o tc ts ./tc -root /root/tiny-container -shell ./ts started ts: notice will since making calls. main goal https://github.com/hectorcorrea/tiny-container/blob/main/tinycontainer.go create however do bit tricky let see done: first then re-launches now new directory end launches indeed sandboxed. l47 function takes care looks more less this: func xaction // default action: wrapper createcontainer os.exit 0 launch-shell internally launch therefore command must be executed after runshell function. launched namespace via call exec.command trick passing cloneflags tell syscall.clone newns newuts ... below program. string args : -x-action cmd /proc/self/exe args... cmd.stdin os.stdin cmd.stdout os.stdout cmd.stderr os.stderr flags instruct runs command. var uintptr newipc newpid newnet newuser cmd.sysprocattr syscall.sysprocattr cloneflags: uidmappings: gidmappings: err cmd.run nil fmt.printf error n 1 just shortcut relaunch currently executing. arguments pass detected cause settings start session relatively simple listed below. thing here change name tinyhost our affect not where make pivotroot switch folder considered issue / l149 makes built-in pivot https://www.man7.org/linux/man-pages/man8/pivot root.8.html took as-is book. last users also environment variable demo outside syscall.sethostname byte cmd.env something turns switched easy sounds does all utilities /usr/bin installation. might tempted say why bash executable whatever designate work except binaries dependencies need those always track down. going look ways built fake root. because produces statically compiled done no https://github.com/hectorcorrea/tiny-container/blob/main/tinyshell.go github repo implements shell. basic read-eval-print-loop https://en.wikipedia.org/wiki/read e2 80 93eval 93print loop repl very limited commands: pwd enough before values reports session: /bin/bash logname xdg type tty term xterm-256color home /root ubuntu-20-test assuming indicated beginning able following indicating shell: container... launching session.. compare saw ran container: session... hostname: in: readme.md build.sh createbusybox.sh instead variables ones fact open re-run did likewise space cannot all. limiting story using other certain kind traffic back forth would really useful wanted database server host. cover topics. busybox another third party glory unlike poorly commands. approach follows his tool purpose https://www.busybox.net single binary expect find installation their implementation close complete. richer experience script https://github.com/hectorcorrea/tiny-container/blob/main/createbusybox.sh symlinks ./bb root/bin provides: /root/tiny-container/bb /bin/sh bin tons busybox. bin/ diff hexdump grep vi even hello.txt edit text save pretty neat. interested talk minimal https://www.youtube.com/watch v gmpldbcmhui brian redbeard great learn about tar balls containers. buildroot https://buildroot.org/ ideas similar. wrapping up learning view interesting me. thinking building next docker anything knowledge helps me understand hosting companies power large environments hundreds fast secure."
	},{
		"id": "/blog/2019-11-18/my-strange-journey-to-becoming-a-ruby-developer",
		"name": "My (strange) journey to becoming a Ruby developer",
		"text": "my strange journey to becoming a ruby developer five years ago in 2014 after being c# for many i took first job as developer. transitioning from one technology stack another is not uncommon among software developers most of us have jumped tech more than once our lifetime e.g. dos windows desktop web single user client-server but each transition different brings challenges and rewards. this post want reflect on how going mac/linux worked out me. before taking / .net 10 years. applications were built with vb.net later moved build c#. when came although had little experience mac or linux was very comfortable foundational concepts like system design object oriented programming relational databases development such. few bought play spare time. spent nights hello rails zombies getting acquainted the tools workflows that ecosystem use. initially switch graphical interfaces working terminal biggest shock eventually embraced it. blogged about initial non-professional experiences 2011 https://hectorcorrea.com/blog/ruby-development-on-the-mac-os-x/15 2012 https://hectorcorrea.com/blog/web-development-on-the-mac-os-x-part-ii/5 . why did jump didn t rage quit anything that. enjoyed while it still think s great language. yet noticing world outside so unknown me wondered what missing by staying particularly since there are non-windows developers. idea fully understanding other way building systems appealed non-technical part wonderful team at penn state 2014. application top hydra now samvera framework. challenging because typical talking database developed small collocated team. instead stored its information repository platform native linked data support https://duraspace.org/fedora/ solr http://lucene.apache.org/solr/ using large number open source components early stages required collaboration coordination state. project rather highly distributed nature fact point remote gems development. learned lot quite bit. entailed people variety institutions opportunity interact them veterans which helped better understand ecosystem. also personal projects time an https://github.com/psu-stewardship/scholarsphere something beautiful environment your code see allow view use criticize enhance would been much harder world. couple 2016 brown university. university library involved exactly sense they non-relational databases. work done involves https://github.com/brown-university-library/bul-search interacting via apis https://github.com/brown-university-library/vivo-on-rails has structure am scary right senior can write python php smaller close access domain experts librarians makes requirements iterating process simpler. believe big went corporate higher education. started learning never thought end up ed if organization startup. given too hard language longest get used dynamic typed statically some incredibly benefits typing love tradeoffs too. recently go supports static safety net gives cringe times declare run even program. cannot both ways guess. thing easy prototype ideas. amazed powerful create proof concepts. kind do requires exploratory steps perfect work. comes built-in tooling connect http endpoint read/write files parse json manipulate arrays classes plain hashes without ceremony verbosity. course good take stuff concept production amazes former. here example full program catalog search books display results note: no longer works changed their functionality shows convert response sort iterate over print console: require net/http make request url https://search.library.brown.edu/catalog.json q field all fields uri net::http.get json.parse simple array docs .map doc title: title author: author year: pub date .first.to descending year books.sort b -b :year output console books.each book puts - :title :author hand grok. familiar technologies appreciate does you dislike magic prevalent applications. plenty things follow similar models views controllers migrations asset pipeline routing requests activecontroller activerecord on. last asp.net mvc fair amount forms well viewstate anyone simplicity processing closer forms. 5 finally turning off default features verbose certain areas expose bare-bones within rails. try html tags pages opposed helpers prefer standard specific syntax. mean unlike rubyguides https://www.rubyguides.com/2019/05/rails-link to-method/ href /ruby-book rocks /a link suspect minority this. javascript coffeescript https://hectorcorrea.com/blog/a-decaf-introduction-to-coffeescript/1 likewise possible monstrosity server generated responses https://signalvnoise.com/posts/3697-server-generated-javascript-responses turbolinks https://guides.rubyonrails.org/working rails.html maybe jquery. perhaps day will titled parts just kidding. dependencies mixed feelings external gems. dependency nightmare introduces baffles adopt gem save lines code. keep mind where tends be compared we become starting notice expense maintenance those cautious give though adopting dependency. problem newcomer these patterns know who follow. interpreted produce binaries copy done. download resolve server. augmented operating deploy doesn figure timing bad personally don surprises during deployment. issue ran into version removed rubygem registry logger 1.2.8 yanked https://rubygems.org/gems/logger/versions tricky find until tried production. local machine cached bombed trying -- talk timing. compounded deep might depends causes problems. reliance c extensions common nokogiri mysql2 mostly versions compiler issues particular compile new gcc https://github.com/sass/sassc-ruby/issues/37 issuecomment-248959463 installed having hunt down compilers installing really learn ready application. again artifact developing deploying such life surprised configurations available. seeing text editors mysql postgres servers apache nginx passenger thin puma puzzling complex beginning. mention provisioning deployment monitoring coming window written visual studio sql iis webserver variations setup pale comparison experienced ruby/linux environment. normal productive. nosql os x flavors whatnot. shell scripts perfectly matter professional growth tool largely influenced operates. closing pleasant. ve doing things. case curve per-se academic libraries probably subject post. hasn ended. whole proficient windows. exploring explore. indicated solrdora https://github.com/hectorcorrea/solrdora marcli https://github.com/hectorcorrea/marcli decided pervasive library-land. planning competent wasn either ruby...so tell."
	},{
		"id": "/blog/2019-10-29/linux-mv-and-file-patterns",
		"name": "Linux mv and file patterns",
		"text": "linux mv and file patterns last week i ran into an interesting issue renaming a bunch of files in my machine. the command was: 42 .jpeg .jpg was expecting this to rename all but instead returned usage: -f -i -n -v source target ... directory at first thought had typo reality is that not valid command. culprit shell bash expanding before executing understandably refuses continue. illustrate let s assume there are two no on machine when execute original what passes something like this: file1.jpeg file2.jpeg notice expanded individual stayed as-is since nothing expand it into. certainly intending do. few searches web showed many people having same problem here one example https://unix.stackexchange.com/questions/181141/rename-multiple-files-with-mv-to-change-the-extension . working around easy enough. wrote quick script do job: for 96 ls -1 basename done posted about twitter got several suggestions how make better. solution provided by john borwick https://twitter.com/borwick/status/1188697953768050689 particular very neat: other suggested use either or mmv trying both these utilities can be installed easily mac systems. using https://www.cgarbs.de/blog/archives/430-mmv-mass-rename-of-files-and-more .html syntax is: 1.jpg https://www.putorius.net/rename-command-linux.html -xa things dawned me while reading blog post local man pages 1 would have worked dos dos/windows user long time ago. even says under good old you could multiple saying ren b reason because pretty simple didn t support unix style pathname pattern expansion glob page system has following note: -g --glob filename arguments. useful if re braindead such as cmd.exe which won wildcards behalf user. so explains why puzzled. probably did with must been 10 years ago different operating : beware native function systems might give information 2 rather than program your see also https://unix.stackexchange.com/questions/3586/what-do-the-numbers-in-a-man-page-mean"
	},{
		"id": "/blog/2019-07-14/mysql-utf-8-issues",
		"name": "MySQL UTF-8 issues",
		"text": "mysql utf-8 issues a few months ago i upgraded the machine where this website runs from with ubuntu 14 to one running 19. because was coming very old version of decided create brand new virtual 19 and move content myself rather than letting attempt migrate my stuff. good idea lot has changed plus it gave me chance start clean slate. however in doing migration manually missed step configure database use left instead default latin 1. resulted blogs displaying bunch strange characters for things that are not part 1 character set example several showing √¢ or you ll see i√¢ ve . when saw knew right away problem encoding but wasn t sure how fix data. turns out there were two steps had take. - first set. pretty straight forward. prompt issued following command what current notice reported latin1 : select @@character @@collation -------------------------- ---------------------- swedish ci then utf8 via alter command: blogdb collate general query ok row affected 0.00 sec 2 update data setting as did above makes uses save into records already stored on it. found answer https://stackoverflow.com/a/9305294/446681 stackoverflow shows convert existing another. case ran sql script converted contentmd field binary took care issue: using final words course backed up before after these just so far looks like now is handled correctly. also updated server notes remind if ever setup box. can configuration github repo https://github.com/hectorcorrea/ubuntuserver"
	},{
		"id": "/blog/2018-09-29/goodbye-gmail",
		"name": "Goodbye Gmail",
		"text": "goodbye gmail one of the advantages owning my web domain is that i can host website and email anywhere like. this allows me to switch or mail providers without having change address. week moved from being hosted at be a different provider deleted google account entirely. blog post elaborates on why did how went about it. background for hector@hectorcorrea.com with many years. don t remember well it before have vague recollection hosting an exchange server home some point later using built-in service company provided. when first switched in 2007 was really happy hands-off approach afforded particularly impressed spam filter they overnight worry not all. back then knew analyzing text order detect known were analysis provide better advertising via little ads top page. ok that. as time became concerned much information sharing google: search history documents calendars so on. few years ago started duckduckgo https://duckduckgo.com/ default engine firefox https://www.mozilla.org/ browser attempt reduce identity share form browse but didn do else. last year accidentally blocking people s access https://www.blog.google/products/docs/protecting-our-google-docs-and-drive-users/ their own wake up call me. incident highlighted working content context all data free . thing knowing parsing looking words like software development probably want books becoming smarter making connections storing servers made uneasy. reading algorithms oppression https://nyupress.org/books/9781479837243/ by safiya umoja noble earlier another call. makes clear its core company. perspective more giving store worth straw recent addition smart reply https://www.blog.google/products/gmail/save-time-with-smart-reply-in-gmail/ buttons service. sudden get suggests potential quick replies could use. these are contextual gives suggestions depending email. will suggest success got ll take look thanks check them out indication deep into going. doing word matching crossed line personal comfortable this. webmail weeks alternatives outside gmail. things if companies dig need pay what concept right think any major outlook yahoo going comes privacy information. saying goes you re paying become product https://www.forbes.com/sites/marketshare/2012/03/05/if-youre-not-paying-for-it-you-become-the-product/ depend sounds reasonable even though never paid before. found good reference https://en.wikipedia.org/wiki/comparison wikipedia looked several options. end between protonmail fastmail. https://protonmail.com/ has gotten lot publicity recently because strong focus encrypted way read downside cannot your standard apps example does work application iphone instead must use which supports passing encryption keys. needs fastmail https://www.fastmail.com/ enough. might trust won mining does. priced entry level plan 30 per year. new downloaded google. am thankful takeout https://en.wikipedia.org/wiki/google option opened test drove days once offerings chose plan. 50 custom domains. love pricing month long term contract. after updated mx records servers. most stressful part process had than 10 wanted sure right. provides great instructions https://www.fastmail.com/help/receive/domains.html u f6d1409f tell whether changed configured getting sent within 15 minutes so. pretty painless. filtering big gains gave bit curious see 2018. far good. area where huge improvements enough now fanfare. life case import account. decided 11 afford start fresh. scan 12 thousand emails although nice trip down memory lane bringing over. something always go file there would surprised do. running hiccups only keep delete entirely feels actually still extra everybody else junk subscriptions counting since logged update january/2019 : other also gone now. through deleting stackoverflow linked authentication. tried login failed. luckily set password contacts reevaluate manage contacts. calendar ended apple offers icloud. able connect icloud relatively easily. phone calls texting sure. liked app loved addresses worse remembered every person emailed to. just haven done docs puzzle figured replace yet. spreadsheets drive read-write computers. hardly ever accessed though. possible anything. tell. tail course list products used over completely forgotten noticing today reminded analytics site. those anymore come takeout. loss mostly turned learn try features site mess sites work. future log analyzer goaccess https://goaccess.io/ monitor traffic subscribe groups resubscribe somehow them. again deal later... february/2020 been thought idea experiences september overall very pleased missed notch availability filtering. couple eventually stopped. suspect took detection algorithm consider spam. integration easy hoped works did. should clarify dark everyday"
	},{
		"id": "/blog/2018-09-22/installing-ruby-with-ruby-install-and-chruby",
		"name": "Installing Ruby with ruby-install and chruby",
		"text": "installing ruby with ruby-install and chruby posted on 2018-09-22 updated 2024-02-07 when i started writing code learned there were many ways to download install a mac. initially was comfortable the version of that comes installed os x by default or using installer available at ruby-lang.org https://www.ruby-lang.org/en/downloads/ latest version. as my needs evolved needed have more than one machine work different projects use specific versions ruby. are tools manage multiple among options tried rvm https://rvm.io/ rbenv https://github.com/rbenv/rbenv https://github.com/postmodern/chruby . in end found combination best for large due their minimalist approach. below instructions follow brand new mac switch them. first via homebrew https://brew.sh/ : brew then particular example 2.3.5 use: you can also --latest available. provides script add your bash init let change configure environment point correct locations setting path gem home variables. these lines .bashrc file automatically select source /usr/local/opt/chruby/share/chruby/chruby.sh another auto.sh cd into project. do not this prefer manually issue command want versions. s pretty much all need setup simple non-intrusive. rest post few notes things ve about obvious me oddities thing still confuses is it does keep list newer install. even though 2.5.1. now web site what shows machine: --version ruby-install: 0.7.0 stable versions: ruby: 2.1.9 2.2.7 2.3.4 2.4.1 jruby: stuff notice no mention whatsoever request if know 2.5.1 will unknown proceeding anyways ... /users/hector/.rubies/ruby-2.5.1 dependencies continues installation... successfully puzzling after downloading show run without arguments. last gotcha ll out must indicate error get rather update: seems longer an recently 0.9.3 didn t despite peculiarities find great tool ready since usually am after. common errors 3.x experienced set issues related per-se they happen try from https://www.ruby-lang.org/en/news/2024/01/18/ruby-3-2-3-released/ has open ssl. throws ssl suggest --with-openssl-dir flag tell library use. example: 3.3 -- --prefix openssl@3 december 2024 openssl 1 been deprecated 3. other seen error: undeclared identifier function name string blog franklin yu https://dev.to/franklinyu/error-of-rubyfunctionnamestring-when-compiling-ruby-32b8 gives explanation problem people reported culprit case xcode line address remove them again https://github.com/rbenv/ruby-build/discussions/1938 discussioncomment-2213912 sudo rm -rf /library/developer/commandlinetools xcode-select --install display xcode-select: note: requested developer output terminal but dialog asking confirm make sure accept prompt. something surprised don executable which report nothing. because actually defined script. once indeed function. type -bash: type: chruby: goes here quirky reload shell be chruby. practice typically just close window force loaded"
	},{
		"id": "/blog/2017-03-15/build-your-own-software",
		"name": "Build your own software",
		"text": "build your own software this blog post is an extended version of the notes that i used for my talk titled yes it http://2017.code4lib.org/talks/build-your-own-software-yes-build-it at code4lib in los angeles california on march 7th 2017. you can also watch recording presentation https://youtu.be/euarnag-cy4 t 2h57m30s s about 20 minutes long. introduction like original attempt to create a discussion benefits writing our solutions as opposed adopting large open source solutions. during short tenure within libraries ve gotten impression people almost always prefer adopt over developing one. by mean projects vivo http://www.vivoweb.org/ hydra https://github.com/projecthydra islandora http://islandora.ca/ and folio https://www.folio.org name few. while think wonderful idea brings great opportunities collaboration believe we have swung pendulum too far towards rather than building software. seems be default mode these days. tries counter approach purposely highlighting disadvantages well emphasizing advantages experience tend oversimplify what takes existing solution developed or another institution underestimate long term maintenance ramifications approach. am concerned stopped thinking talking needs users could should them. instead focus adopt. box ourselves prematurely. shifted conversation from user available products sidestepping needs. not bash source. love lot respect those communities surround personally participated two years development sufia well-known head. want us continue sharing design ideas code work do. throughout will use examples variety help clarify make concrete. but keep mind presented here apply any just ones mentioned post. discuss areas where good fit. suggest everything scratch go alone . before adds value judicious when how it. don there one-size-fits-all development. example capabilities one-developer-team are different team 4-5 developers. some present might others not. ymmv. premise: complex why advocating write mostly because complex. realize sounds bit counter-intuitive saying then do more hope makes sense. first complexity going donald norman definition. living with he says: suggests things many intricate interrelated parts which complicated confusing says describes state world other words terms technology relates social component recognizing something new. 2009 history embodied nathan ensmenger said: if consider end-product finished heterogeneous system both technological components understand problem has historically been so discussed context libraries. 2015 portland her does exist vacuum becky yoose lines code. part lives livelihoods case library interacts around us. given address fronts: technical social. insight provides although cannot remove manage better ways. reduce build. built one purpose less handle institutions. notice say develop simple acknowledging second advocate treat learning process product. get learn way appropriate sustainability compared written someone else somebody else. 1985 essay programming theory peter naur said view activity programmers achieve certain kind production program texts goes indicate knowledge gain transcends recorded documented 2011 barn clark revisited paper found applies enterprise architecture models well. developers domain experts librarians arrive shared understanding solved realistically resulting codified sense involved they learned worked out together. produce them become institutional knowledge. educational researchers ambrose colleagues product similar skip happened its got hours free fail recognize comes set assumptions nor gained larger gap becomes. mike davidson interesting organizations did last quarter ship too. let sacrifice much helps seen languages command. python shops minimal command ruby language. same teams without expertise java. huge setback team. asking codebase big undertaking. adding new language top even bigger challenge. sciences concluded reductionism i.e. whole community still seem does. review e.g. diagrams classes database structures tests system. misconception arises see suggested previous section. form customizations. institutions favor proprietary customize however significantly risk ending up fork hard merge back upgrade original. happens yet ignore promise next time ll careful real sure reasons alternative total control upgrades. decide functionality technologies put every release. incremental updates base know easier t. mitigate risk. dan mckinley wrote limit amount innovation introduces once. decision rewrite try particular feature test feel iterate perhaps rollback. once no easy experiment rapid changing field come year. conservative their follow works neither penalty using older well-established brownie points latest tools. end day care meet speaking really need. sometimes find need web site looks ahead hire designer times architectural change needed support requirements. whatever allows basis. agile calls being iterative implementing all features increments pace. shift away into discovery patrons solr blacklight vufind. showcase connect each vivo. preserve digital assets islandora. important succeed delivering piece likely together tool used. indicated earlier work. section highlight fit systems. producing small utilities limited single tier either interface middle data tier. single-tier modify cross layers. programs popular among mention couple here. traject gem parse marc files dump regardless front-end display users. stackview jquery plug-in items catalog emulating virtual stack backend give json feed api endpoint fetch data. tools thing few external dependencies. consideration adoption whether read-only read-write. simpler only performs read operations read-write operations. such adoption. crosses tiers ui via solution. grows fast biggest aspect provide environment comradery match own. positive security vulnerabilities use. release required patches relatively quickly after known exploit announced. patch local very responsive master branch date patches. keeps eye usually this. closing increasingly wouldn cody hanson blogged ago excellent crucial fully drives critical young discipline hundreds practice. concept somnambulism sleepwalking mediations would add trying means implications. months was reading book described anthropology evolved 1800s today surprisingly crawford newcomb describe books were interviewed had visited faraway lands writers themselves never places stories relayed went anthropologists realized incomplete culture travel accounts. improvement soon lacked interpret experiencing observed culture. until stayed periods explain practices. call doing fieldwork complete solve ability deliver hampered. fronts. requirements matter suitable share designs size scope and/or taking lose remember references s.a. bridges m.w. dipietro m. lovett m.c. m.k. 2010 works: seven research-based principles smart teaching john wiley sons. b.s. revisiting modelling in: mouratidis h. rolland c. eds advanced information systems engineering. caise 2011. lecture computer science vol 6741. springer berlin heidelberg d. r. 2013 encountering morocco: cultural bloomington indiana university press. n. ieee annals computing 31 1 86-88. society. retrieved 14 2017 project muse database. from: https://muse.jhu.edu/article/263929/ september opinion http://codyhanson.com/writing/software.html 30 choose boring http://mcfunley.com/choose-boring-technology p. sciencedirect 15 5 253-261. http://pages.cs.wisc.edu/ remzi/naur.pdf a. cambridge mass.: mit b. conference slides https://code4lib.org/conference/2015/yoose"
	},{
		"id": "/blog/2017-01-18/migrating-my-site-from-node-js-to-go",
		"name": "Migrating my site from Node.js to Go",
		"text": "migrating my site from node.js to go posted on: 2017-01-18 updated 2024-09-17 over the years i have written code power website hectorcorrea.com in a variety of programming languages and platforms. last version was application using mongodb store data before that c# asp.net mvc with sql server backend. one things liked most about is how lightweight it compared website. when started learn surprised language felt while at same time being incredibly powerful so decided rewrite this compare experience implementation had . first became interested after reading rob pike s post less exponentially more https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html which he tells story on robert griesemer ken thompson were disappointed many features going be added c language. instead flow they create new but enough develop serious applications e.g. big programs maintained by teams way rails ecosystems seem thrive adding platform point you need multi-gigabyte ide work or tons gems do anything useful ruby. during career worked statically typed mainly as well dynamically ones mostly ruby node.js. strikes me although feels tend to. fact comes superb standard library means can get as-is without having download bunch utilities build basic application. beginning bit unsure will feel modern against some provide nowadays like class inheritance generics exception handling. provides alternative approaches for re-utilization message passing error handling rudimentary quite practice. source structure available github under repository https://github.com/hectorcorrea/hectorcorrea.com if are interested. make no promises quality project matter should know deploy production. rather simple: file main.go https://github.com/hectorcorrea/hectorcorrea.com/blob/go version/main.go launcher. deal all http interactions web package ll see there handle requests type static files vs request dynamic blog pages web.go version/web/web.go good place start. database access models package. example blog.go version/models/blog.go handles crud operations entries. html generation views version/views viewmodels version/viewmodels used an object each information view could possible need. makes sure has little logic possible. wrote noticed similar branch https://github.com/hectorcorrea/hectorcorrea.com/tree/byenodejs express.js url routing sessions whereas write myself just fun it. really packages out simplify wanted much done relying external router routes.go version/web/routes.go session management session.go version/web/session.go use github.com/go-sql-driver/mysql mysql. where drew line : not code. however did statements database. am any object-relational-mapper orm old hand. what comprehensive. packages/functions pretty think of. rock solid built-in template engine crypto io string manipulation xml/json access. name there. toolkit also very nice fmt format your test run unit tests two favorites. love picky minimalist its syntax. statement must curly braces even body only likewise keyword loops produces binaries such great feature. compile linux binary mac production copying binary. git pull bundle update deployment. deployment script something along lines of: terminal env goos scp mybinary user@server:/some/path/ contrary people say actually tool dependencies bundler does npm fetch crude mechanism drawn lot criticism community. personally don t care part those crazy developers thinks program 1 few 2 once dependency own tree rest found order maintain base long 5-10 base. sort forces convention providing sophisticated ok mixed feelings go. totally err nil pattern understand value considering errors throughout making them visible called happy path particularly true backend writing tiny channels explicitly other advanced concurrency goroutines internally concurrent though. looks synchronous perspective developer. appreciate asynchronous needs still relatively tooling. perhaps biggest lack repl debugger. install via list steps manually debugger working intimidating https://github.com/derekparker/delve/blob/master/documentation/installation/osx/install.md another thing roots needed reference than languages. why case concept value/reference applies been bitten ways remember pass-by-value might always https://neilalexander.dev/2021/08/29/go-pass-by-value.html neil alexander this. constructors miss. beauty forcing execution initialize created cannot objects initialized their default values empty strings zero numbers. overall pleased small ldp https://github.com/hectorcorrea/ldpserver arguably better fit since app far complicated personal safety net gives you. both prefer former. cleaner types arguments functions explicit. limited missed hierarchies. weary hierarchies heck gamma et al. stated we favor composition 20 ago https://en.wikipedia.org/wiki/design patterns anxious would good. may/2017 posts describing experiences go: golang - http://blog.tamizhvendan.in/blog/2017/05/01/using-golang-in-production-my-experiences/ building 2017 https://grisha.org/blog/2017/04/27/simplistic-go-web-app/ september/2024 now hosted generated https://hectorcorrea.com/blog/2023-10-17/static-generated-site running produced"
	},{
		"id": "/blog/2016-11-03/bundle-grep-and-rails-applications",
		"name": "Bundle, grep, and Rails Applications",
		"text": "bundle grep and rails applications when i first started programming in ruby on one of the things that struggled most was finding where a particular piece code method class string defined . this particularly difficult looking for gem not my application. couple years ago mike giarlo https://github.com/mjgiarlo showed me great tip to search through entire application your dependencies by using today while working with somebody else new noticed needs get broader attention since think is incredibly helpful newcomers. these days use manage provides an option list path all gems using. you can see running: terminal --paths example brand it will show something along lines of: /users/xyz/.gem/ruby/2.3.1/gems/actioncable-5.0.0.1 /users/xyz/.gem/ruby/2.3.1/gems/actionpack-5.0.0.1 /users/xyz/.gem/ruby/2.3.1/gems/actionview-5.0.0.1 /users/xyz/.gem/ruby/2.3.1/gems/activejob-5.0.0.1 /users/xyz/.gem/ruby/2.3.1/gems/activemodel-5.0.0.1 /users/xyz/.gem/ruby/2.3.1/gems/activerecord-5.0.0.1 plus million other paths combining output venerable linux tool base have no idea they been defined. let s say want find definition retry job calling. issue following command: -r review which would be like this: .../2.3.1/gems/activejob-5.0.0.1/changelog.md: wait: 10 .../2.3.1/gems/activejob-5.0.0.1/lib/active job/core.rb: job/enqueuing.rb: queue: :low priority def options result shows activejob fact fourth file returned points directly line notice last match. fair its api are very well documented simple google tends give good results rails. however as does always do some less popular gems. approach describe blog post am trying figure out function or depending nearly itself. thing dot at end command. important instructs also current folder. if leave only but own so much bash initialization script https://gist.github.com/hectorcorrea/fd56edea3333bec47829 file-bashrc-sh-l39 type bgrep text-to-search know there developers https://gist.github.com/grosscol/494e972e1b9dc1dfac18430f4d631593 same ag silver searcher instead same. update 12/22/2016: ran across https://tenderlovemaking.com/2016/02/05/i-am-a-puts-debuggerer.html aaron patterson bunch tips debug probably check too. 2/10/2021: updated syntax"
	},{
		"id": "/blog/2015-09-17/introduction-to-ldp",
		"name": "Introduction to LDP",
		"text": "introduction to ldp linked data platform http://www.w3.org/tr/ldp/ is a w3c recommendation that defines set of rules provide an architecture for read-write on the web. this blog post concept and how get started with platform. what anyway if we are going talk about should start by talking you familiar already feel free skip section. tim bernes-lee defined in 2006 http://www.w3.org/designissues/linkeddata.html which he articulated vision allow world wide web move from being linking documents i.e. html pages humans can read navigate new model know as semantic will include both machines process. his own words: isn t just putting it making links so person or machine explore data. when have some find other related same paper suggested four simple help materialize vision. use uris names http people look up those someone looks uri useful information using standards rdf sparql they discover more things over time their available following these because were well-known standard technologies exchange was easier automate compared example parsing follow links. uses something called resource description framework http://www.w3.org/tr/2004/rec-rdf-primer-20040210/ represent way modeling three part statement consist subject predicate object. indicate title book might follows: book123 brief history but relational databases take at database heads https://gist.github.com/hectorcorrea/c49dc287581d2856a12e quick comparison between two. chapter 3 working ontologist http://workingontologist.org/ has great explanation why important. now let s say url http://dbpedia.org/resource/abraham lincoln query dbpedia http://wiki.dbpedia.org well known provider resource. result be rdf:type http://dbpedia.org/class/yago/presidentsoftheunitedstates . dbp:birthplacename hodgenville kentucky u.s. dbo:birthplace http://dbpedia.org/resource/hodgenville glancing conclude abraham president united states born hodgeville ky. interesting comes provided dbo:populationtotal 3206 dbo:thumbnail http://commons.wikimedia.org/wiki/special:filepath/hodgenville ky town square.jpg width 300 dbo:ispartof http://dbpedia.org/resource/kentucky rudimentary shows power got first able our original query. case also figure out where population even thumbnail image notice not hosted dbpedia. done amazing http://wiki.dbpedia.org/ crowd-sourced community effort extract structured wikipedia allows download http://wiki.dbpedia.org/about page statistics: english version knowledge base describes 4.58 million 4.22 classified consistent ontology including 1 445 000 persons 735 places 478 populated 411 creative works 123 music albums 87 films 19 video games 241 organizations 58 companies 49 educational institutions 251 species 6 diseases. 2009 gave ted titled year open went worldwide http://www.ted.com/talks/tim berners lee showed real examples used wild large scale. jazz project https://linkedjazz.org/network/ another create visualization christina harlow she explains libraries leveraging http://christinaharlow.com/what-is-linked-data-part-1/ kicked off movement served us well. only covered others consume failed short describing mechanism add update existing www2014 presentation http://www.slideshare.net/alehors/www2014-linked-data-platform-20140410-33367843 arnauld j le hors described before conceived there no formal definition application integration. state art publishing read-only updated dumps via entry point. berners-lee principles terrific foundation don go far enough. many unanswered questions: do i seems obvious list resources exist vocabulary media types formalize performed ldp: operations based words api applications write means server client communicate each retrieve delete clear verbs fetch servers allowed expose ones. practice less like this: workflow https://hectorcorrea.com/images/ldp http.jpg concepts several important understand diving into details. everything includes sources expressed triples saw previous non-rdf pdf image/audio/video files binaries else. big dedicated managing contained within containers robert sanderson http://purl.dlib.indiana.edu/iudl/media/6537033f0r indicated heart kinds basic direct indirect all themselves. fact triples. picture structured: resources.jpg action next sections see few show requests urls headers payload must issued em responses /em body return. assume hosting entries comments attachments demonstrate work sources. execute through any program capable issuing curl https://en.wikipedia.org/wiki/curl checkout section implementation later samples play with. reading needs issue request terminal /blog123 host: www.somewhere.org assuming blog123 return response http/1.1 200 ok content-type: text/turtle link: http://www.w3.org/ns/ldp basiccontainer rel type @prefix dcterms: http://purl.org/dc/terms/ rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.somewhere.org/blog123/ rdfsource container dc:title user dc:subjects weekly posts technology stuff server: default returned turtle http://www.w3.org/tr/turtle/ clients formats json-ld rdf-xml. indicating header link diagrams kind source. expect response. am typically abbreviate per specification. creating jump right fictitious blog. / creates would 201 created location: http://www.somewhere.org/abc123xyz text/plain returns status code location recommendations indicates does specific id automatically generates one abc123xyz example. may slug header. been: slug: blog789 returned: http://www.somewhere.org/blog789 want could http://purl.org/dc/elements/1.1/title 789 http://purl.org/dc/elements/1.1/subject random topics again successfully /blog789 follows plus adds added served-managed readonly. http://www.somewhere.org/blog789/ dc:subject adding fetched source elements post. follow: entry1 my social sciences /blog789/entry1 http://www.somewhere.org/blog789/entry1 updates itself make aware contains. blog789/ ldp:contains last triple points newly alludes its home thing is. however provides common handle come custom implementations then everybody order participate. inside specified remove reference container. two namely different options automatic goes detail ldpc differ check out. nandana mihindukulasooriya http://www.slideshare.net/nandana/learning-w3c-linked-data-platform-with-examples gives good them. written perplexed https://gist.github.com/hectorcorrea/dc20d743583488168703 elaborate differences containers. every did against refuse since possible under me happen explicit this. says accept anything seen server. deal rdf. most apis need access account formats. provisions resources. blogs sample authors. author789 image/jpeg content- length: 1020 binary here couple request: content-type passing -x --header --data-binary @author789.jpg http://www.somewhere.org/ been easily /author789 back jpeg. head instead report content-length: 23151 accept-ranges: bytes content-disposition: attachment filename author789.jpg size nonrdfsource allow: put clearly appropriately. haven point it. ll updating indications overwrite pass save replaced conflics etags than tries replace try handled specification subset author123 leave else unchanged. patch http://www.w3.org/tr/2015/note-ldpatch-20150728/ ld official yet. group currently favoring still decided. allude candidate 1.1 sparqlpatch turtlepatch fedora 4 http://fedorarepository.org updates. source: application/sparql-update insert http://dbpedia.org/ontology/thumbnail http://www.somewhere.org/author789 https://www.w3.org/wiki/ldp use. appropriate you. http://fedorarepository.org/download lot tested repository choice hydra http://projecthydra.org/ stack using. shameless plug. toy implemented very compliant purely experiment. rather easy install executable https://github.com/hectorcorrea/ldpserver/releases your environment linux mac windows run submitting https://github.com/hectorcorrea/ldpserver parting thoughts authors challenge design infrastructure smart job integrating think step towards providing infrastructure. level integration missing. admit bit hard beginning. tempted discard implement sighted. approach pretty soon interact ideal situation. quote brian sletten http://www.ibm.com/developerworks/library/wa-data-integration-at-scale-oslc-and-the-linked-data-platform/index.html puts nicely: builds rest structure harmonize behavior across compatible tool vendors support consistently ecosystem likely together. actual details largely irrelevant resource-oriented supported ton main covering worth looking thinking interfacing primer http://www.w3.org/tr/ldp-primer/ information. wrote prepared give connect minneapolis. slides https://hectorcorrea.com/downloads/introduction ldp.pdf powerpoint ldp.pptx"
	},{
		"id": "/blog/2015-02-28/code4lib-2015",
		"name": "Code4Lib 2015",
		"text": "code4lib 2015 img src https://hectorcorrea.com/images/pdx mthood.jpg style float:right alt mount hood / http://code4lib.org is an annual conference that brings together a mix of people work at libraries and/or develop software for libraries. given i am newcomer to the library domain this was my first time attending and learned lot. among things found interesting single-track conference. means all 400 attendees are on same room listening sessions except pre-conference workshops. have not attended in long but liked several about approach. it forces organizers be very selective will presented. session also presenters focus appeal broader audience. interested what say keeps everybody page throughout if you bump into somebody know sure they as did rsquo s easier start conversation. because don t get us versus them kind sessions. having times more honest balanced approach certain topics like relation between managers developers or librarians. likewise makes hears some difficult social issues presented do chose whether want hear struggles under represented groups we most conferences last 10 years been technology oriented only. other hand has http://code4lib.org/conference/2015/schedule including technologies team dynamics so on. attend where learn maternity leave morning solr indexing afternoon. had styles keynotes 45 minutes normal 20 lightning talks 5 nice pace day. didn take notes ll try summarize favorites. workshops bikers.jpg bikers monday linked data workshop http://goo.gl/qruiye by karen estlund tamsin woo. timely topic me new covered ld resource description framework rdf trying solve how map domain. talked difference mechanism leverage importance using uris predicates objects enable across institutions. appreciated broad overview real life examples provided these tools. one key points your isn reusable shareable machine readable then re doing enough . exercise which list terms from open vocabularies http://lov.okfn.org/dataset/lov/ lucky paired with two others sandy umkc richard berkeley knew background needs use outside rdf. afternoon dpla api http://bit.ly/c4l15-dpla-api gave introduction their fetch information repository. managed install plug-in issue http get/post request via browser api-key realtime issuing requests short amount audience rather level expertise apis. posted small code sample demo easy plain html javascript. can see gist https://gist.github.com/hectorcorrea/c1419e5ea8791cab14bf github running version here https://hectorcorrea.com/demos/dpla.html portlandia.jpg portlandia selena deckelmann https://speakerdeck.com/selenamarie/code4lib-what-beginners-teach-us kicked off great keynote welcoming starting development. particular she asked put themselves shoes beginners so-to-speak when help them: next answer beginner question moment consider... feel spoke elephant comes complexity getting development environment ready particularly newcomers. think called unwritten chapter need over big hurdle writing software. becky yoose http://code4lib.org/conference/2015/yoose presentation tools deep implications produce final consumers: than just lines code. part our lives livelihoods case libtech interacts everything around us. benefits complications librarians open-source community point view well consumers. fact world hasn friendly women majority fit jason a. clark scott w. h. young http://code4lib.org/conference/2015/clark done make books available without special devices read them. concept publisher fascinating reasons. geek aspect making beautiful meaningful displays text images plug-ins second reason taking content book semantic discovered through standard web. kevin http://www.kevinclarke.info/slides/c4l15/index.html packer.io tool create identical multiple platforms single source configuration he showed scripts used deploy aws digitalocean others. although love deployment products production bit skeptical environments. good showcases complicated made setup process something addressed instead acknowledging problem fix sidestepping potentially worse yet another abstraction layer top. wayne schneider https://github.com/wafschneider/dynamic-indexing-code4lib2015/blob/master/dynamic 20indexing 20code4lib 202015.pdf raw true dynamically index 1.5 million marc records deal failures updates. really cool stuff. favorite thomale https://rawgit.com/jthomale/c4l2015-presentation/master/slides.html slide-100 come up search interface. says simple google box behind box. order results weighted. described analyzed different patters media e.g. articles vs would affect defaults provide andromeda yelton http://andromedayelton.com/blog/2015/02/16/c4l15-keynote-transcript/ thoughtful talk titled architect wanderlust: web weaved variety history started 9 ago evolution place society. her closing remarks sum vibe generated during talk: spend nine inventing building systems own assumptions. intentionally remove barriers space kinds backgrounds tell stories build ways transform matter decenter ourselves aren give evolve predict. wanderlust. each day there hour reserved volunteered present wide find entire http://wiki.code4lib.org/2015 shameless plug: relational heads https://gist.github.com/hectorcorrea/c49dc287581d2856a12e understand database hydra stack hide its complexities. trey pendragon http://www.slideshare.net/josephschmoseph1/become-better-developers-44564801 improve developer. emphasized best way least developer only much professionally grow solo environment. thoughts said beginning blog quite experience me. got exposure better grand scheme things. addition understanding goals setting challenges face address challenges. presentations were recorded videos youtube https://www.youtube.com/user/code4lib/videos worth checking out"
	},{
		"id": "/blog/2015-01-09/learning-javascript-data-structures-and-algorithms",
		"name": "Learning JavaScript Data Structures and Algorithms",
		"text": "learning javascript data structures and algorithms img src https://hectorcorrea.com/images/js book thumb.jpg style float:left / the folks at packt publishing asked me to review one of their newest books https://www.packtpub.com/application-development/learning-javascript-data-structures-and-algorithms by loiane groner. sup 1 /sup as a fan i am glad see on subject targeted developers. publication this is rather timely given tremendous growth in popularity that has experienced over years not only language for front-end web development but also recently viable alternative backend via node.js. although there are lot most them java/c developers very little groner indicates 2 who said were made languages such c java p. 37 describes some basic category typically cover including stacks queues lists trees graphs sorting searching provides clear simple implementations javascript. many would benefit from reading particularly those started software career with or other scripting haven t taken traditional computer science degree courses where taught. already good beginner-level 3 4 example they tend be people studying help professor classroom setting. s hand gentler introduction assume better fit first time own. have been writing code two decades might best judge found much easier follow than introductory 5 . does great job describing mechanics concise implementations. each chapter begins short terminology needed understand presented. important complexity material increases new yet she manages keep both explanations implementation accurate. wrote examples so can run any modern browser no setup required reader. instructions how server experience navigating through different chapter. think painless will appeal readers shy away heavy server-side development. samples easily adapted side node.js inclined do though. all presented available online github repo: https://github.com/loiane/javascript-datastructures-algorithms basics queue starts an tour features arrays appreciate spends full come built-in functionality e.g. slice map reduce filter shift explains nuances using sort default lexicographical implemented arrays. these allowed focus themselves fifo vs lifo implement variations like priority circular relatively easily. throughout are. barely 30 lines 6 7 shows below snippet code: // partial function var items this.enqueue element items.push this.dequeue return items.shift this.print console.log items.tostring q queue.isempty q.enqueue hello world q.print q.dequeue after presenting moves more complex linked sets dictionaries hashes liked smoothly reused previous chapters. when implementing technique handle collisions hashtable uses linkedlist shown 237 original this.put key value position loselosehashcode table improved version if undefined .append valuepair enjoyed consistently covers cases even discusses interesting variations. addition list touches double lists. likewise basis hash table. tree last her chapters course ones simple. recursive operations concise. don always work large loads goal introduce concepts beginners stress test use makes sense 8 was implements removing node give comprehensive overview algorithms. traversal binary in-order pre-order post-order guidance kinds should explore want learn about subject. same true graphs. nice explaining strategies adjacency matrix incident suited. mentioned before takes advantage ones. fragment graph add vertex edge operations. notice dictionary store list. 170 it repo https://github.com/loiane/javascript-datastructures-algorithms/blob/master/chapter09/01-graph.js vertices adjlist this.addvertex v vertices.push adjlist.set //initialize array well this.addedge w adjlist.get .push common algorithms: bread-first search depth-first topics easy explain describe detail along you algorithm action. dedicated sorting. introduces reader i.e. bubble merge insertion quick odd explanation execution times depending sorted beginning presents algorithm. description its accurate felt section could connected explored note linking bit usages inserted versus fact. bonus free extra titled https://www.packtpub.com/sites/default/files/downloads/4874os chapter11 algorithms.pdf which recursion fibonacci big-o notation. ebook 26 advertised packtpub site. worth checking out you. criticism content excellent seem used editing going press. ran into sentences dropped middle without context connection rest book. surprised lack several reviewers listed suspect focused accuracy technical making feel polished. another area visualization provided outputs results debug console. nicer output page realize outputting console keeps as-provided needs tweaked order way unchanged server. overall minor criticisms indicated above level provided. summary student college fascinating topic. later practitioner still find intellectually challenging 9 us never particular described seen programming techniques our skills sharp. authors focusing exposed dry revisit fun them. references disclaimer: gave access copy write review. did receive compensation it. please numbers formats. facilitate location indicate appear. http://www.amazon.com/gp/product/0262033844 thomas h. cormen et. al. http://www.amazon.com/algorithms-4th-edition-robert-sedgewick/dp/032157351x robert sedgewick kevin wayne o reilly published http://www.amazon.com/structures-algorithms-javascript-michael-mcmillan/dp/1449364934 almost exact title contents read cannot compare two. https://github.com/loiane/javascript-datastructures-algorithms/blob/master/chapter04/01-queue.js https://github.com/loiane/javascript-datastructures-algorithms/blob/master/chapter04/02-usingqueues.js fact 11 explicitly says slower non-recursive require less code. shameless plug. ve posted my blog draw ruby https://hectorcorrea.com/blog/drawing-a-binary-tree-in-ruby/13 coffeescript https://hectorcorrea.com/blog/drawing-a-binary-tree-in-coffeescript/3"
	},{
		"id": "/blog/2014-12-26/practical-object-oriented-design-in-ruby",
		"name": "Practical Object-Oriented Design in Ruby",
		"text": "practical object-oriented design in ruby img style float:left src https://hectorcorrea.com/images/poodr.jpg / anyone that has done a decent amount of programming is bound hear about the book http://www.poodr.com/ sup 1 /sup by sandi metz. when i started on was no exception to this and kept hearing people talk it. having read fair share books over years wasn t too excited yet another subject since eventually most them start look feel alike. but caved picked up copy poodr as commonly abbreviated it enjoyed quite bit. blog post short review two areas found interesting poodr. particular emphasis message passing rather than class structure metz puts very refreshing way understanding systems think missing many subject. additionally true its name provides approach key concepts how apply them. does not shy away from some difficult situations developers will encounter designing systems. instead explains these guidance avoid common pitfalls gives great advice pick sensible strategies for situations. mentioned previous paragraph first thing struck me took unconventional dedicating majority concept objects classes working an system. although focus messaging new idea alan kay been known say at least late nineties 2 3 articles ood oop tend put more passing. example wikipedia http://en.wikipedia.org/wiki/object-oriented opening goes like this: paradigm based which are data structures contain form fields often attributes code procedures methods. entry elaborates little bit methods used modify get brief mention half into page under additional section. other hand introduction her indicates thirds dedicated messages only chapters objects. early she managing dependencies caused between p. visible system foundation 15 . throughout several core through lens talking inheritance states that: mechanism automatic delegation. defines forwarding path not-understood 105 therefore can be seen arrangement technique : cost arranging you delegation free 184 focusing able describe run using incorrectly. one biggest problems with deep hierarchies s hard see predict effects overwriting method subclass because we changing chain our implementation. us have bitten before forgetting call parent implementation track down unexpected behaviors they hidden hierarchy. again words: define long search resolution. depends anything above dangerous 162 discussed oo literature 4 appreciate layperson language would allow beginners intermediate relate easily. chapter 6 job explaining shallow hook template pattern best out hierarchies. also describing alternatives including use modules or mixins composition. particularly insightful contrasts composition terms delegation: alternative reverses benefits. relationship codified hierarchy stand alone result must explicitly know delegate another. allows structural independence explicit really good plain realistic examples recommendations each techniques e.g. is-a relationships has-a duck-types behaves-like-a 188-190 art binds software coding considering separate code: design. ... thus code. binding directly appealing. disagreed designed believe all well others poorly nevertheless. makes clear arranged even falls trap mentioning undesigned applications 7 according own definition proper wording talks evolve time constant change what so important. emphasizes goal arrive easy changes: change. need matter. purpose do later primary reduce preserving changeability act achieving perfection 16 material teach practices could their time. covers single responsibility principle dependency injection duck-typing unit testing interfaces pragmatic way. honest showing naive implementations while acknowledging sometimes better leads harder given abstract functionality spread classes. state fixed set rules tradeoffs decisions after refactoring piece 8 acknowledges implementation: individual abstraction might understand there place obvious behavior whole 187 should achieve. encourages try come solutions both effective leave options open changes future guess preserves your decide make suggest doing nothing same current postpone decision 22 never perfectly end reiterates advises mindful presented practice learn break rules: now bend purposes. tension inherent means meant broken learning then designer greatest strength 241 criticism don lot criticize here am sure fully agree count small category 5 manages full advise insight however disappointed database access development popular rails framework much happens suspect topics were included keep focused laudable something liked this. targeted ruby. couldn help cringe acrobatics explain mocks stubs. unlike java c# provide formal tests stubs fail detect actual represent become stale. problem per-se aware of. alludes says static languages interface always intentional 54 reiterated 9 convoluted features language. summary interested everybody else consider myself average http://en.wikipedia.org/wiki/illusory superiority comes knowledge got book. earlier designs work every situation. convey deal information tackle terminology recommend hands development. takes advantage few specific statically typed benefit reading explained detail any kind regardless if update march/2015 nathan youngman titled go object oriented http://nathany.com/good/ he converts shows go. references edition http://www.amazon.com/practical-object-oriented-design-ruby-addison-wesley/dp/0321721330 http://c2.com/cgi/wiki alankayonmessaging big e-mail exchange http://www.purl.org/stefan ram/pub/doc en discusses camps programming. patterns: elements reusable http://www.amazon.com/design-patterns-elements-reusable-object-oriented/dp/0201633612/ gang four famous intrinsic inheritance. 19 exposes details said breaks encapsulation 20 favor 272 pages long. compared grady booch analysis 600 bertrand meyer construction 1200 called small. bike gears https://hectorcorrea.com/images/bikegears.jpg"
	},{
		"id": "/blog/2014-10-07/hydra-connect-2",
		"name": "Hydra Connect 2",
		"text": "hydra connect 2 ballroom https://hectorcorrea.com/images/hydraconnect2.jpg this is my first time attending a https://wiki.duraspace.org/display/hydra/hydra - fall 2014 and i was very impressed with the overall experience. from what understand there were about 150 attendees representing 47 different institutions. event had good mix of workshops lightning talks tutorials sessions un-conference working groups meetings. below are notes thoughts some that attended. geodata in blacklight session attended on project stanford to make use geographical information via blacklight. name geo it allows users perform searches by selecting bounding box map. once an area has been selected kind data/documents can be shown particular researches narrow down list documents they need review without having download open them individually. using overlap ratio rate search gis results. bess sadler made point we should thinking how libraries going curate geo-spatial data seems changing culture around metadata still flux for development text searches. example if type cleveland might light see results related even these don t have word but points inside cleveland. full app like mention maps plugin also available plot two things though. solr do geo-filtering. provides concept select square geofilt filter circle. more here: https://wiki.apache.org/solr/spatialsearch uses leaflet javascript plug-in handle map interactions page: http://leafletjs.com/ beth jack reed mentioned opengeo suite which server product caching multiple formats shape file kml json pdf jpeg other side requirements. http://boundlessgeo.com/solutions/opengeo-suite/ rdf tom johnson gave hands-on tutorial activetriples ruby gem work triples. source code used during presentation https://gist.github.com/no-reply/fce0771254a3a25817dd file-walkthrough-rb abstracts most syntax wraps objects so you much regard store came or will end up in. does not fedora just handles memory. really neat gem. believe way described along lines projection underlying graph found https://github.com/no-reply/activetriples 4 test drive esm√© cowles quick active 4. he https://github.com/escowles/testdrive activefedora builds top activetriples. whereas activetiples into operations behave activerecord classes regular rails application. later learned another piece puzzle called ldp client makes http connection fedora. diagram https://hectorcorrea.com/images/activefedora diag.jpg fact api based loosely linked platform 1.0 architecture clearly indicated rest documentation https://wiki.duraspace.org/display/ff/restful didn mean me until heard context at conference. find http://www.w3.org/tr/ldp/ http://www.w3.org/tr/ldp . stack although plenty experience relational databases am somewhat comfortable nosql total n00b when comes curious attend andrew woods tech lead presented why option needs community. talked shares sensibilities community solid base institutions developers slides https://wiki.duraspace.org/download/attachments/63408008/f4-hydra-connect-stack-2014-10-02.pdf features particularly interesting ability large files scalability versioning durable storage. s native feature inter-connected repositories shared content vocabulary. thrilled concept. think idea sharing database level attractive beginning scale well over least world databases. personally focus services update: guess somebody case acting as service supporting storage repository. sure yet ...food thought. areas under transactions asynchronous e.g. access remote aws index solr. adam wead justin coyne couple presentations topic migrating applications 3 several conceptual changes one digitalobject many datastreams properties both. all items nodes subtype datastreamnode datastreamnodes addition disseminators now gone rels-ext datastream significant progress updating currently alpha version sufia 8. http://jcoyne.github.io/hydra-on-top-of-fedora4.html slide-25 pointed out take advantage provided looks http://awead.github.io/presentations/fedora-migrate/ /8 versions relationships. given new tools technologies librarians archivists data. head immerse myself domain. karen estlund difficulties creating both human machine readable entered humans machines. she feel free create their own ontologies needed strongly encouraged people uris rather than strings predicates. wide range topics discussed sessions. surprised realize discussions represent ordered lists problem pretty non-rdf already solved. hand where big difficult rights distributed environment http://www.w3.org/wiki/webaccesscontrol said before topics. glad hear book reading recommended resource learn rdf: semantic web ontologist http://workingontologist.org dean allemang jim hendler."
	},{
		"id": "/blog/2013-11-24/connection-handling-with-node-js-and-mongodb",
		"name": "Connection handling with Node.js and MongoDB",
		"text": "connection handling with node.js and mongodb one of the things that trips most newcomers to is how different process connect databases from compared other programming environments. for example pseudo-code below a typical database handled in environments: code db driver.opendb string data db.find some-query db.close // do something general concept environments only when you need access disconnect it as soon are done accessing . this makes perfect sense multi-threaded because there could be hundreds concurrent threads trying unless close your might run out handlers. internally drivers create manage pool share limited number network connections potentially large clients. however client must its order available threads. since thread http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/ executing javascript no request completes can should open once leave long web site running. allows next use an already opened rather than having re-open on every request. using but at least real reason so. fact recommended keep open. following quote christian amor kvalheim https://groups.google.com/d/msg/node-mongodb-native/msgnnug8c1o/hiaqvdu1bwoj authors driver node.js: mongoclient.connect app boots up reuse object. ... so across all requests. means follow: program loaded ...on request.. assume don t problems keeping maintain object around connection. fine except passing several layers application now they really shouldn know anything about. if express.js will probably main server.js save value variable pass routes which turn models doable ugly. disconnects issue consider what happens successfully first launches then lose connectivity database. hang execute commands bad would nice timeout let not longer s works. i ve played some server parameters like connecttimeoutms sockettimeoutms http://mongodb.github.io/node-mongodb-native/driver-articles/mongoclient.html server-a-hash-of-options-at-the-server-level-not-supported-by-the-url avail. fortunately indicated stackoverflow post http://stackoverflow.com/questions/18688282/handling-timeouts-with-node-js-and-mongodb issues event loses tap into invalidate existing mongoconnect module written called make black box have worry about mentioned blog post. just wrapper native http://mongodb.github.io/node-mongodb-native/api-generated/mongoclient.html mongoclient-connect still get built-in functionality provides without connect/disconnect issues. started install npm. terminal npm installed call setup method configure to. typically program. var require mongoconnect.setup mongodb://localhost:27017/yourdb configured anywhere command against mongodb. find list documents blogmodel.js file following: exports.getall function callback mongoconnect.execute err or reconnect return db.collection .find .toarray docs fetch our handle null beauty opening checking has been valid. does you. by time executed check values passed more documentation entire source github repo https://github.com/hectorcorrea/mongoconnect way supports connecting single small applications want changes multiple databases...or shoot me e-mail :"
	},{
		"id": "/blog/2013-11-23/running-a-node-js-web-site-in-production-part-2",
		"name": "Running a Node.js web site in production (part 2)",
		"text": "running a node.js web site in production part 2 last year i blogged about my first experiences hosting website https://hectorcorrea.com/blog/running-a-node-js-web-site-in-production-a-beginners-guide/49 . this post detail what have learned the 12 months applications. finding provider for under 100/year thing that is there are still no cheap providers like other programming environments. example you can easily find companies php ruby or asp.net with support multiple sites using your own domain file storage included and database access 100 year. but s not case node.js. although many great nodejitsu heroku azure price to get full environment host goes into 300 too expensive if business more than wanted spend pet projects. while hosted which phenomenal platform as service paas 9 month was able one free mongodb via mongolab very happy it. does provide e.g. store pictures up significantly 33 soon want site. do it yourself really mentioned wasn t hard on by linux virtual machine. felt uneasy doing because am an expert administrator wished could somebody else take care of infrastructure me. however given been company me all bells whistles decided look again at iaas model. fact amazon provides machine http://aws.amazon.com/free/ made easy plunge own. allows evaluate approach extended period reevaluate next big picture following diagram shows how time cloud. aws https://hectorcorrea.com/images/siteonaws.jpg rest will go details diagram. see ec2 infrastructure. micro instance use free. has little memory cpu allocation enough low traffic mine. after one-year trial expires kind 180 http://aws.amazon.com/ec2/pricing/ 126 commit another quite close enough. installing tools need vm extremely packages already available install nginx git few commands. unlike where listen incoming port 80 front server lot system level features daemon right security run so don worry that. doesn make admin per-se reduces anxiety being responsible handling coming 80. any tell unwanted comes public sleep much better night knowing battle tested rather application. information https://www.google.com/search q proxy node configure applications good place start http://blog.argteam.com/coding/hardening-node-js-for-production-part-2-using-nginx-to-avoid-node-js-load/ below settings forward 3000 notice pass settings: code localhost:80 location / cache valid 200 304 404 12h key uri args set header x-forwarded-for remote addr http://localhost:3000/ redirect off break also some caching out box. these allow content reduce number requests handle. script requests. default them long cache-expires original response below. nice box ability through just add new section config specific application say 3010. complete configuration files here https://github.com/hectorcorrea/hectorcorrea.com/blob/master/etc/nginx/nginx.conf details. ve split per folder github. typical express.js side data angular.js client side. entire source github repo https://github.com/hectorcorrea/hectorcorrea.com since leverage had express return proper cache-expire static assets js html data-driven pages. configured day: var oneday 86400000 app.use express.static viewspath maxage: when request partial view client-side app.js serve day expiration value http headers. ngnix recognize 24 hours be without having ask same things hit minutes were visited large users only cached directly from nginx. headers: 5 seconds 60 ms 1000 res.setheader cache-control max-age date date.now .toutcstring res.send json development testing macair. once ready deploy updates push changes ssh pull update there. smooth process would eventually develop code. t1.micro instead mongolab. advantage disadvantage making network total different data. problem something aware of. jun/2015: recently installed working problems. point worried limited might put over edge far good. external dependency this. let works. cloud should play idea dynamodb mongodb. maybe ll days. yet hesitate options particular provider. 8gb disk dirt http://aws.amazon.com/s3/pricing/ called s3 instead. storing frees traffic. solution around. building single page build spa angular.js. experience separate blog noticed views now rendered becomes plain api list posts needs array renders happen naturally uses mvc framework server-side likely spas handle whole ui logic. controllers entries small absence user interface exports.all function req res m model.blog req.app.settings.config.dburl includedrafts req.isauth m.getall err documents error cannot retrieve blogs docstojson req.app.settings.setcache reconsidering express.js. perhaps connect.js architecture. sure research into. complications come deal architecture though. devices javascript considerations search engine crawl address issues post. summary pretty initial concerns alleviated server. often updating installation patches such problem. concerned couldn happier. paying 0.00 dollars trial. suspect end expires. lets perfectly them. originally posted entry. ended staying setup 9.50 hosting. bad either. disposal enjoying model thought would. ago rebuild spin matter then shutdown old two machines pay extra cost 0.013 hour amount paid even 50 cents. dec/2015: switched digital ocean. moment similar specs 5/month. 10/month 1 gb ram sounds appealing. love pricing ocean clear. advantages switch harder jan/2017: rewritten described https://hectorcorrea.com/blog/migrating-my-site-from-node-js-to-go/69 check out."
	},{
		"id": "/blog/2013-01-15/introduction-to-node-js",
		"name": "Introduction to Node.js",
		"text": "introduction to node.js http://nodejs.org is a javascript interpreter that runs in server environment and gives us the ability run code directly on i.e. outside of browser just like we can side other languages php python ruby c# or java. based engine google wrote uses for chrome browser. author ryan dahl took this called v8 repurposed it so http://www.ibm.com/developerworks/opensource/library/os-nodejs/ . also added some features are important when running example read write from file system receive send http requests. open source there installers available mac windows linux. installer under 8mb size. you download install proper your platform here http://nodejs.org/ once have installed should be able terminal window as follows: node --version v0.8.17 note: all examples i present blog post at github repo https://github.com/hectorcorrea/intro-to-nodejs feel free them play with them. hello world fact means helloworld.js program one below: console.log var batman robin a.push superman employee name: jane developer department: execute by previous rather silly but serves demonstrate using typical notice how array object were declared plain constructs. will use traditional syntax variable scoping types function declarations statements loops conditionals et cetera. - web version goal show development let s simple process following return any request http://localhost:3000 require port 3000 serverurl localhost http.createserver req res request: req.url now new date html lt p gt time /p res.end listening : server.listen if save webserver1.js could console launch our point http://localhost:3000/somepage.html see something this: localhost:3000 /somepage.html 16 lines stand up start keep mind standalone no apache nginx iis behind scenes. plus having processing requests comfortable 5 through 13 might look familiar even never used node.js. line create pass callback every an received. executed two parameters reference was received response sent client/browser. however not strange passes argument createserver similar concept delegates https://msdn.microsoft.com/en-us/library/ms173171.aspx blocks http://www.robertsosinski.com/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/ thing passing parameter internally result executing function. last calls method listen loop waiting call which displays url returns paragraph text stay until cancel ctrl c terminal. full found https://github.com/hectorcorrea/intro-to-nodejs/blob/master/webserver1.js post. event-driven non-blocking i/o key differences between platforms model such feature embedded opening home page built runtime easily building fast scalable network applications. makes lightweight efficient perfect data-intensive real-time applications across distributed devices. executes goes into events they come. what happens program. puts come through. detected event fired during give chance act request. case came output more accurate explanation about site http://nodejs.org/about/ different threaded servers iis. only tool another well-known approach. details even-driven models beyond scope mostly performed functions. most programming environments blocking code. pseudo-code shows reading // implementation readfilesync sample.html after has been completely readfile err xxx immediately very way perform nowadays environments. display its content console. because thread where blocked completely. then execution continues contents don t block instead tell continue displayed document later few milliseconds seconds later. while being why immediately. thorough vs well advantages disadvantages each approach these good posts check learn understanding http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/ main issue http://amix.dk/blog/post/19581 video history http://www.youtube.com/watch v sac0vqcc6uq related he chose developed minutes 15 20 need become model. probably biggest challenge get started work environment. below updated saw section particular disk i/o: fs 127.0.0.1 counter 0 /sample.html fs.readfile res.setheader content-type text/html world. counter: starting made did before. 14 asynchronous 18 exit effectively control back sits idle process. either 14-17 ll build webserver2.js https://github.com/hectorcorrea/intro-to-nodejs/blob/master/webserver2.js ecosystem package manager npm libraries packages idea list tools visiting https://npmjs.org than thousand writing. debugging mvc frameworks database drivers unit testing functions minification concatenation scripts coffeescript compiler name-of-package folder application lives. modules subfolder store installed. express.js popular sites express.js. http://expressjs.com mvc-framework sinatra asp.net provides lot plumbing required parse including query string forms cookies handle routing support view engines templates. unlike rails does provide built-in models. express minimal flexible framework providing robust set single multi-page hybrid -- machine steps mkdir /dev/myapp cd bunch separate module allow log sends server. morgan short express1.js content: path logger app app.use dev serve static files express.static path.join dirname public route everything else. app.get res.send fire app.listen 2 load assign next line. except whole provided discuss next. 6 sets outputs processes. 9 middleware name whatever want. usually dump assets html/css client jquery images change often. 12-14 custom correspond file. elaborate second. 17 starts coming 3000. section. test browse http://localhost:3000/whatever happens. / 200 31ms 11 /whatever 13ms dummy inside http://localhost:3000/sample.html include url. echo sample public/sample.html 25 creates 2-3 register handled own ... finally comes automatically existing it. parlance piece anything returned do much more. https://github.com/hectorcorrea/intro-to-nodejs/blob/master/express1.js routes nice things out box traffic depending looks like. ask /books/:id /books configure requirements. aware order defined make sure put handler wildcard handler: new: book req.params.id go books accessing value id passed field req.params object. /books/4 4 verbs. possible define users /search typically specific search simply shown first second app.post form req.body.searchtext x results express2.js https://github.com/hectorcorrea/intro-to-nodejs/blob/master/express2.js templates several produce without ve doing examples. common template ejs jade. both views inject data elements jade syntax. https://github.com/visionmedia/ejs bookview.ejs h1 /h1 b title: /b book.title author: book.author old embed specifying symbols. property inserted rendered. render update following: bookdata writer res.render book: calling viewbook.ejs want render. express3.js https://github.com/hectorcorrea/intro-to-nodejs/blob/master/express3.js december/2014: 4.x closing hope flexibility happy coding"
	},{
		"id": "/blog/2012-12-06/running-a-node-js-web-site-in-production-a-beginners-guide",
		"name": "Running a Node.js web site in production (a beginners guide)",
		"text": "running a node.js web site in production beginners guide this post i describe my experiences taking first website to it on port 80 and hosting outside local box so that s available the world wide web. question is where you are reading can be described as typical low-traffic uses express.js coffeescript. although have deployed many c# sites windows before time host anything linux environment . keep mind read blog post. update: see also part ii of with 12 months later https://hectorcorrea.com/blog/running-a-node-js-web-site-in-production-part-2/53 chosing provider model when third party there basically two models. one called infrastructure service iaas company owns hardware but charge pretty much everything related software including operating system upgrades security server et cetera. any support vps falls into category. second platform paas takes care most elements e.g. cetera companies provide tools push your code configuration files them they take from there. examples use nodejitsu http://nodejitsu.com heroku http://www.heroku.com both natively. research found traditional cheap for websites php python ruby out do not node.js. order need find plans those tend very cheap. lack was somewhat surprise me suspect because quite mainstream yet. case chose an wanted get hands dirty all steps involved website. particular am using cent os machine azure http://windowsazure.com cloud site. provides good at reasonable prices 3 free trial period. oh irony ...hosting microsoft azure. things interesting help learning process decided without putting apache or nginx front it. some advantages throughout intermediaries. great exercise long term will probably switch like don t worry about stuff. issue ran trying run mac x reserved administrators root user serverfault indicates http://serverfault.com/questions/112795/how-can-i-run-a-server-on-linux-on-port-80-as-a-normal-user true below 1024. let example canonical force listen http requests 80: var require serverurl 127.0.0.1 console.log starting : http.createserver function req res timestamp new date request url req.url received if /error throwing error throw oops res.end hello .listen we save file webserver.js non-root by issuing node ll error: eacces above 1024 say 8080 3000 then would worked ok. quick way around problem via sudo: sudo since ask enter password command accepted. after 80. remember path assigned likely different normal account. could user. specify full /usr/local/bin/node change visudo include installed /usr/local/bin application coffeescript needed sure were ended up altering believe vary even among distros search should specifics environment. noted link mentioned instead elevated permissions another option configure redirect traffic port. 8080. did try though. what happens crashes topic address crashes. visiting our sample exception. effectively stop how restart automatically crash forever. forever tool monitors relaunches soon detects anymore developed guys open source. instructions here https://github.com/nodejitsu/forever readme simple following command: terminal start -a -l forever.log -o out.log -e err.log log indicated previous its own information standard output respectively. important once program runs background won console. lines webserver outputs logged rather than hit couple times browser view cat successful ones threw exception restarted. notice response re-launched / immediately work expected. box. started submitted restarted therefore responsed ok last 127.0.0.1:80 tue dec 04 2012 23:28:05 gmt-0500 est 23:28:10 23:28:11 23:28:14 23:28:19 23:28:21 reboots now able thing handle restarting reboots. write init.d shell script. these special scripts executed beginning plenty create details script beyond scope gist follows: init.sh under /etc/init.d section line call forever: /path/to/your/app/webserver.js however make likewise directory lives. fully qualify following: lastly chkconfig indicate run. might depend distro page http://support.suso.com/supki/centos init startup point this. blown https://github.com/hectorcorrea/hectorcorrea.com/blob/master/etc/forever-initd-hectorcorrea.sh aware which turn calls complicates matters little bit large skeleton similar end with. final thoughts goals myself familiar required complicated got learned lot process. made appreciate whole more professional iis behind scenes while same allowing hand light weight used end. had chosen been taken me. packages deploys their servers. just something deploy voila. copy servers backup existing you. rollback version button. really nice features eventually move ready moving https://www.nodejitsu.com offers targeted incredibly easy reasonably priced. update 2 moved amazon aws"
	},{
		"id": "/blog/2012-11-11/using-ssh-without-a-password",
		"name": "Using SSH without a password",
		"text": "using ssh without a password this blog post describes the steps that i used to configure my os x machine remote linux having enter every time. although there are many web sites describe process in detail found most of them assume you know your way around machine. since s really not case for me decided write from linux-newbie point view with hope help others might be on same boat. tested connecting mac air running 10.8.2 openlogic centos 6.2 virtual windows azure cloud. suspect apply distros but have no confirming it. before we dive into details let define few terms ll see throughout post. local machine: or host represents represent linuxuser: user name use linuxmachine.somedomain.com: also can successfully login by issuing linuxuser@linuxmachine.somedomain.com and typing password. if read on. prep work first thing do is make sure an /.ssh directory configured proper access rights. following commands: terminal once logged create directory. it very important created limited hence -m 0700 parameter call below. makes only owner has its content. don t skip step. picky won . cd mkdir .ssh ls -la should show bunch files directories newly access. drwx------ as new already exists still change rights chmod instead command. logout host. generating key now generate file issue command ssh-keygen -f rsa -c linuxuser passphrase re-enter will two called rsa.pub under ./ssh these contain private public keys respectively. just convenience add comment best understanding other purpose. plain text their content cat e.g. next step copy secure program scp commands linuxuser@linuxmachine.somedomain.com:.ssh/authorized authorized aware previous overwrite want something else say keys2 then manually append existing file. doubt wouldn reading working machine...but ve been warned : our similar what did folder before. again commands. 0600 when listed. -rw------- adding authentication agent so far generated copied need automatically credentials. follow. ssh-agent register via ssh-add utility. eval -k reenter notice here one entered utility above. at all good. try sshing prompted order time launch line /.bash profile code 96 seems default therefore pass credentials open terminal. run through shown update: turns out keychain tool comes take over ssh-agent. dave dribin http://www.dribin.org/dave/blog/archives/2007/11/28/ssh leopard more information about relation final tweak everything worked fine however pretty darn long alias type much. edit /.ssh/config favorite editor it: hostname linuxmachine.somedomain.com username domain config references learned described book bash cookbox http://www.amazon.com/bash-cookbook-solutions-examples-cookbooks/dp/0596526784 carl albing jp vosen cameron newham. goes each check chapter 14 writing shell scripts information."
	},{
		"id": "/blog/2012-09-13/using-layouts-with-ejs-in-express-3-x",
		"name": "Using layouts with EJS in Express 3.x",
		"text": "using layouts with ejs in express 3.x over the last couple of months i ve been meaning to update my sample express.js application https://github.com/hectorcorrea/simple-blog from 2.x but fact that support for was removed holding me back. framework itself supported concept and both template engines jade worked nicely it. functionality has now need be updated provide this themselves. week found includes https://github.com/visionmedia/ejs allowed emulate getting 2.x. is probably mother all hacks it s simple works purposes so am documenting others might back on upgrading just because lack 3.x. layout.ejs file looked something like this: code doctype html head title /title link rel stylesheet href /stylesheets/style.css / /head body h1 header /h1 p welcome /p b - /b footer /body /html an a index.ejs would look content page achieve similar behavior ended up 1 splitting two files layouttop.ejs layoutbottom.ejs 2 updating views explicitly include top bottom layout files. following example shows contents looks whereas finally layouttop layoutbottom notice how requests which bit annoying since previous version implicit think small price pay keep working. few final words... although approach not nearly as elegant what provided liked its enough upgrade without having switch download somebody else fork or invest lot time learning build engine behavior. sure more solution can achieved by taking closer at source will leave another day/blog post."
	},{
		"id": "/blog/2012-06-19/a-decaf-introduction-to-coffeescript",
		"name": "A Decaf Introduction to CoffeeScript",
		"text": "a decaf introduction to coffeescript img style float:left src https://hectorcorrea.com/images/coffeescriptcup.png / below are the links slides and code samples that i used during my presentation gave earlier this month. pdf https://hectorcorrea.com/downloads/intro-to-coffeescript-slides.pdf zip https://hectorcorrea.com/downloads/intro-to-coffeescript-code.zip or github https://github.com/hectorcorrea/intro-to-coffeescript pretty bare since spent most of time showing samples. feel free contact me if you have any questions as go through them. can find detailed explanation binary tree sample showed on other blog post https://hectorcorrea.com/blog/drawing-a-binary-tree-in-coffeescript/3 ."
	},{
		"id": "/blog/2012-05-23/compiling-coffeescript-from-sublime-text-2",
		"name": "Compiling CoffeeScript from Sublime Text 2",
		"text": "compiling coffeescript from sublime text 2 a few days ago i configured editor to use three different hotkeys for and running files. am new so consider somewhat of an achievement that was able pull this off with help the interwebz bit luck. run file in console first hotkey runs displays its output s window. is useful when want quickly small program outputs console. following screenshot shows this: https://hectorcorrea.com/images/sublimetextconsole.png wire up created build system you can do via tools menu option. copy code inside save it as coffeescriptrun.sublime-build default directory my mac path /library/application support/sublime 2/packages/user cmd : coffee selector source.coffee /usr/local/bin windows now on hit command b while editing automatically calls compiler current opened file. key command. also by going build. will be displayed at bottom screen. generate javascript second re-generate associated one easy way create another like did above but slightly tell produce disadvantage approach then have toggle between modes just too many steps something need quite often. what really wanted shot. had binding wording preferences bindings - user entering text: keys super j tells called . next step went plugin... replaced following: import plugin class coffeescripttojavascript plugin.textcommand def self edit self.view.window .run exec -c self.view.file name two things notice code. camelcase version defined bindings. very important look value wish could remember where stole idea know somewhere message board http://www.sublimetext.com/forum/ didn t link. thing calling passing both flag compile which being edited. saved coffeescriptcompile.py same location we before. restarted make sure loaded. somefile.coffee generates corresponding somefile.js does not result though. outputting lastly using previous section rather than dig see how particular feature translated equivalent. wired m pass -p get standard output."
	},{
		"id": "/blog/2012-05-22/drawing-a-binary-tree-in-coffeescript",
		"name": "Drawing a Binary Tree in CoffeeScript",
		"text": "drawing a binary tree in coffeescript https://hectorcorrea.com/images/binarytreecoffee.png few months ago i wrote small program to draw search trees on web page using the html 5 canvas element and was very pleased with clarity structure of resulting code. this blog post elaborates code how it compares previous implementations same idea that have done other languages. ve written programs before c# ruby wasn t sure implementation would compare against more traditional object oriented programming thanks s support for classes is pretty much as you expect: binarynode class hold node data binarytree implement basic operations add walk binarytreedrawer calculate coordinates where each nodes should be drawn. addition since project requires only client-side don store server database pleasant not having deal context switching between client side mental model one. uncommon real life projects but nice bonus pet like this. can see running version here https://hectorcorrea.com/demos/binary-tree-coffee/index.html . full javascript source available github https://github.com/hectorcorrea/binary-tree-coffee or properly speaking implements bst which specific tree. cormen et al. give good explanation their book introduction algorithms http://www.amazon.com/introduction-algorithms-second-thomas-cormen/dp/0262032937 are has at most two children one them called left subtree right there no order enforced per-se pp. 1178 hand always stored way satisfy binary-search-tree property 287 : let x if y then y.key x.key. took bit liberty its related use both terms interchangeably. please aware all references fact main used drawer functionality binarytreedrawer. just stores information about namely value pointers gist https://gist.github.com/hectorcorrea/2772787 constructor: @value - @left null @right root exports window root.binarynode method takes care adding new updating accordingly. goes through in-order calls another function allow decide what do e.g. print screen. shown below. notice partial methods missing remove values find min max cetera. require ./binary rootvalue @root @count 1 add: newnode loop node.value node.right break else node.left walk: callback @walkfromnode walkfromnode: unless tostring: @walk values.push values.join root.binarytree walks calculates does draws rather your choosing @tree @distancex 20 @distancey starts draw: @drawnode @tree.root starting specified drawnode: return @drawleft @drawright drawleft: parentx parenty count 0 @childrencount drawright: childrencount: root.binarytreedrawer console application file console.coffee shows sample usage classes. creates adds outputs these node.js demo create 100 tree.add 50 200 133 250 console.log tree.tostring i.e. output drawer.draw v x1 y1 x2 y2 / installed box run coffee ll an similar this: https://hectorcorrea.com/images/binarytreeconsole.png once implemented easy hook actually element. passed case circles lines than outputting result console. below snippet found web.coffee tree: drawnode gt rootnodecolor 4cc552 green lastnodecolor addfff blue nodecolor fdd017 yellow color lastvalueadded drawline drawcircle nodesize drawlabel initialize some data.. 1000 150 75 24 8 offsetx 30 offsety startx canvaswidth 2 starty final thoughts said beginning succinct ended. clear concise syntax aided defining while behind scenes prototypes resulted write test maintain. posts review learning structures https://hectorcorrea.com/blog/learning-javascript-data-structures-and-algorithms/58 2015 https://hectorcorrea.com/blog/drawing-a-binary-tree-in-ruby/13 2011 https://hectorcorrea.com/blog/binary-tree-in-c-sharp/21 2006"
	},{
		"id": "/blog/2012-04-20/javascript-async-programming-for-sync-heads",
		"name": "JavaScript Async Programming for Sync Heads",
		"text": "javascript async programming for sync heads as i start learning node.js one of the things that have puzzled me most is having to write code run in an asynchronous fashion. since uses event-driven non-blocking i/o model pretty much everything has be written asynchronously. somebody like always executed synchronously paradigm takes a while get used to. this blog post compares how particular synchronous piece looks and feels against its counterpart . my gut feeling was would longer lines more complicated than version but wanted see proof it well at least single example could provide. should clarify am by no means expert on or approach showing might not optimal. think decent implementation you factor newbie status kind read post. describe function called gettopicbyurl which retrieves information entry. steps achieve are follows: list topics from text file find if requested topic contents another disk create object with all data return typical pseudo-code look something this: url getalltopics findtopicbyurl readtopiccontent topic.id id: title: topic.title content: fashion idea execute first step we don t wait value. instead let know what do when s done i.e. perform second step. below function: callback step2 // operation step3 step4 content looking these two examples can easily larger complicated. address issues separately. number found full blown variables declaration error handling other areas fully fleshed out version. following picture shows complete code. left side right one. vs https://hectorcorrea.com/images/sync async.png barely four about 10 longer. increase nothing proud 300 pseudo samples top lead believe. ve noticed once. tends initially once functionality been implemented variable conditional branching difference much. although yet shorter started less concerned end significant. complexity important part story complexity. previous definitively simpler counterpart. regardless experience clear easier sequential there need introduce concept callbacks. said after writing little does daunting time simple rocket science either. shown numbers indicating where each both versions. except very 2-5 lined up defined bottom depends gettopicdetailscallback being already defined. feel odd wish wasn case way around it. few observations relies callbacks deal must work doing programming. inside normal common never strange initially. access gettopicurl made sense re-use some values datapath across multiple steps. exit point line 78 whether reading topic. will sequentially setup stuff picked additional effort. initialized appropriate depending were any errors then just 78. however points 61 77. bail immediately 77 call fs.readfile executed. thought uncomfortable wonder because bringing best practices world into world. ways handle going another. go 1 2 pass name so knows done. 3 define anonymous 65 process completed. techniques regular seasoned developers use daily basis new casual developers. push learn language - good thing. source entire project using sandbox github at: https://github.com/hectorcorrea/simple-blog. /models/blogsync.js /models/blog.js implementation. only demonstration purposes maintained evolves. garann really nice short book targeted front http://www.amazon.com/node-front-end-developers-garann-means/dp/1449318835 worth take node.js. interested highly recommend trevor burnham javascript: recipes http://leanpub.com/asyncjs chapter alone event price book. conclusions make through finding usually slightly environment bit harder understand. become style initial shock seems fade away starts sense. lot figure did over years process. thing books web sites available help tools libraries developed simplify applications. wondering why bother effort tool truth believe here stay main developing applications today jquery ajax. microsoft silverlight also same true websockets aka next ajax those calls asynchronous. forces helps sure track jump head brave"
	},{
		"id": "/blog/2012-04-09/web-development-on-the-mac-os-x-part-ii",
		"name": "Web Development on the Mac OS X (part II)",
		"text": "web development on the mac os x part ii last year i blogged about my first impressions using a for https://hectorcorrea.com/blog/ruby-development-on-the-mac-os-x/15 from point of view somebody with strong windows/c# background. this blog post is long overdue continuation to that post. bought air and half ago intention experiencing what like develop applications in non-windows environment it has been great learning experience. am amazed how much ve learned those 18 months breadth technologies tools played time. hardware built-in software undoubtedly fantastic piece s slim lightweight powerful overall beautiful hardware. not cheap but worth every penny. always lived microsoft windows world was hard. really thought going struggle more didn t. transition pretty easy me. having said don t find incredibly better than 7. there are few differences here nothing earth shattering. some comes bundled certainly its counterpart. example iphoto photo management tool standard come windows. itunes surprisingly seems work operating system updates also seem /i smoother be less frequent pesky. support viewing creating pdfs native even supports annotating pdfs. other finder no or worse explorer browse file system. did surprising lack paintbrush application though. as far concerned have enjoyed available had anticipated. since got gotten hands ruby sinatra rails coffeescript node.js apache mysql heroku git github xcode textmate sublime bunch never used before. img src https://hectorcorrea.com/images/ruby logo.jpg style float:left alt logo / language decided learn popular framework rails. fun found although call myself an expert by any means lot good books sites information get started. https://hectorcorrea.com/images/rails.png gained appreciation mvc truly provides models m mvc. experience asp.net knew were frameworks complete job quite until understood things activerecord database migrations understand heard actually complex started does so many pieces together. addition people use different options configurations when working baffled me while. possible common servers host pros cons passenger mongrel webrick they fit bit overwhelming new environment. contrast which server almost iis. same goes rendering engines embedded erb haml mustache can make process confusing once you pass hello page. mean indicate these knock against hard beginner best way him/her take. https://hectorcorrea.com/images/sinatralogo.png . http://www.sinatrarb.com/ similar because only views controllers v c curve sorter aware out box do binary tree drawer https://hectorcorrea.com/blog/drawing-a-binary-tree-in-ruby/13 put together previous uses sinatra. would recommend before shorter complicated. however if planning doing traditional relational definitively fit. all extra stuff will need your grows deployed production. kinds very mature product. during hearing interested it. https://hectorcorrea.com/images/coffeescriptlogo.png compiles javascript pleasant writing applications. rewrote program written prior draw trees closely code code. source see demo version https://hectorcorrea.com/blog/drawing-a-binary-tree-in-coffeescript/3 https://hectorcorrea.com/images/nodejs.png nodejs itself lead read become take plunge start too. community libraries utilities coming at fast pace. sure next suggesting http://mashable.com/2011/03/10/node-js agree giles bowkett he says http://gilesbowkett.blogspot.com/2012/02/rails-went-off-rails-why-im-rebuilding.html should backbone communities changes paradigms. mentioned integrated environments ide dumbfounded asked around turns several ides most comfortable text editors advanced features. true node.js. everybody uses. opposite variety features auto-completion color syntax ways kick remotely compared provided visual studio. norm linux world. diversity where happens .net languages ended settling http://www.sublimetext.com/2 editor choice license conclusions beginning happy large amount experiment months. could machine glad able compare hand. macs among developers stack being done end think both each them their own strengths weaknesses. days noticed turned home over 4 probably telling sign enjoying whole. update : years later up taking developer 5 into strange journey becoming https://hectorcorrea.com/blog/my-strange-journey-to-becoming-a-ruby-developer/82"
	},{
		"id": "/blog/2012-01-29/functional-asynchronicity-explained",
		"name": "Functional Asynchronicity Explained",
		"text": "functional asynchronicity explained over at the pragmatic bookshelf trevor burnham has a great post titled coffeescript intervention http://pragprog.com/magazines/2011-05/a-coffeescript-intervention in which he shows several code snippets that demonstrate how is typically smaller and cleaner than equivalent javascript code. particular i love example under section. this section piece of trips most new developers. for var 1 3 settimeout function console.log 0 when executed it will output 4 to console rather 2 as people guess first time they work with javascript. although his original blog explains reason behavior would like expand little bit more on reasons why we get since believe are fundamental both understand appreciate coffeescript. there two previous related way s works. second do picks value line finally executed. understanding http://www.w3schools.com/js/js timing.asp used execute sometime future . book coffeescript: accelerated development http://www.amazon.com/coffeescript-accelerated-development-trevor-burnham/dp/1934356786 p. 108 sums up this: always adds its target event queue isn t invoked until after all other run. our means aka be queued loop ended -- not each iteration. true regardless timeout used. ms functions immediately ended. if had 1000 important thing recognize targets won thread stackoverflow.com http://stackoverflow.com/questions/4574940/settimeout-with-zero-delay-used-often-in-web-pages-why gives overview deferred execution worth look you very familiar concept. now know calls happen need does determine what time. end easy enough understand. however newcomers fail grasp create an inner references existing variable actually have access eventually let spell out. notice passing instead creating secondly exists context it. key concept called closure found programming languages. javascript: good parts http://www.amazon.com/javascript-good-parts-douglas-crockford/dp/0596517742 38 douglas crockford defines as: ability was created case just outputs defined therefore whenever different assuming from review i.e. ends got also showing lingers completed referenced by any functions. fact whole lingers. definitively reading closures yeah but still wanted... so probably wondering can change behavior. basically make sure locked iteration 3. here post: // anonymous parameter loop. number executing creates - did before. see words runs pick receives single below slightly modified version ve renamed x easier trying do: should clearer declaration function. irrelevant because brand expected makes point much simpler achieve same result 1..3 doing dirty gotta simplicity syntax doubt many really unless works behind scenes. hope helps clarify going"
	},{
		"id": "/blog/2011-11-22/sliding-in-a-full-page-panel-with-css-and-jquery",
		"name": "Sliding-in a Full Page Panel with CSS and jQuery",
		"text": "sliding-in a full page panel with css and jquery in this blog post i show how to use slide-in on top of another then slide back the original content. you can see running version code presented here https://hectorcorrea.com/demos/slide-in-panel-sample.html . demo starts showing some part lorem ipsum text. when click text new displaying bacon slides-in previous clicking slides again. nothing fancy but enough functionality panel. html used example is basically composed two divs. first div called maindiv includes while second gallerydiv ipsum. id impsum goes /div style these divs shown below. as they are just plain using fixed positioning. main difference between both styles background color beige tone red. notice that initially set all real state height width 100 background-color: ffd39b position:fixed left:0px right:0px bottom:0px height:100 width:100 overflow-y:scroll ff4040 basics one were taken from excellent sliding photo wall gallery http://tympanus.net/codrops/2010/05/14/sliding-panel-photo-wall-gallery-with-jquery/ by mary lou at codrops. ve simplified make it easier what takes content forth. loads we force be visible invisible. // start view... .css : .show ...and collapsed. 0px .hide next thing do wire so user clicks for very simple too: maindiv... .bind function ...send back... z-index 0 ...bring front... gallerydiv:hidden ...resize it... .animate speed collapse animate bind does following: pushes setting its zero. pops front something greater than zero our case 100. sets an animation effect noticeable. finally allows us reverse also simple: gallerydiv... s few lines easily web pages. link self contained. view source grab if like it."
	},{
		"id": "/blog/2011-09-15/future-directions-for-c-sharp-and-visual-basic",
		"name": "Future Directions for C# and Visual Basic",
		"text": "future directions for c# and visual basic these are my notes from anders hejlsberg session on basic. it s been more than 10 years since managed code was introduced back in pdc 2000. every new release of has had one or two major themes: version 1: 2 2: generics 3: linq 4: dynamic features language parity the themes next 5 support winrt windows 8 asynchronous programming . is becoming norm modern connected applications. about 10-15 api supports operations. sounds like a small percent but this probably most used stuff. there different models .net uses asyncoperation t task javascript promises all objects representing ongoing operations callbacks turn your inside out big challenge they have figured how to automatically handle so that feel just good old synchronous general pattern is: public async somemethodasync // before firing operation await execute after completed use operator cooperatively yield control. you can task.whenall run multiple tasks parallel turns method don start threads i need do reading this. threading only when cpu intensive loop perform math calculations. showed some which he consumed within couldn as-is bridge through iasynchoperation didn quite get why obviously proponent static languages took several jabs at nature javascript. funniest line said: sometimes lucky always another feature coming what called caller info attributes. built-in attributes add parameters receive name file path number member name. callerfilepath callerlinenumber caller/membername very nice logging code. roslyn project towards end talked 6.0 named project. basics are: reimagine compilers compiler as service open make its information available others formatters highlighters refactoring dsl with syntax tree produced by becomes other tools peek true semantic knowledge does. shows interactive prompt able create program fly each went. nothing people ruby huge really impress clean was. following picture blurry an example did. declares square function string executes via delegate. wicked https://hectorcorrea.com/images/buildwin2.jpg using we paste vb.net vice-versa. original preserved. ctp already. being rewritten"
	},{
		"id": "/blog/2011-09-13/8-traits-of-great-metro-style-apps",
		"name": "8 Traits of Great Metro Style Apps",
		"text": "8 traits of great metro style apps these are my notes from jensen harris http://blogs.msdn.com/b/jensenh/about.aspx session at build windows conference on tuesday september 13th 2011. is the director program management for microsoft user experience team. design there no yet. opportunity. sidebars system top and bottom app win32 vs content before chrome re-imagined fast fluid touch faster than gui command line first approach beautiful crap most controls support animation has its own language don t mimic mouse semantic zoom: not only does change but also meaning e.g. show categories rather details separate interfaces a screen without broken - in few years snap scale beautifully form factor minimal: 1024x768 widescreen: 1366x768 view required portrait optional use right contracts binds together share search picker with other e-mail social network search: each implements picker: select picture file or web sample: profile facebook having to do intermediate step saving hard drive invest tile icons yesterday s way representing should be an extension you can create tiles your favorite photos album weather sce feel connected alive activity live we have folders groups put stuff down one level it name them people love make notifications displayed small period time after that update roam cloud every gets per-user storage settings state amount via id applications preserve as they go require explicit save cities last game played principles sessions check out: 207 211 391 395 396 405 406"
	},{
		"id": "/blog/2011-08-28/simple-branching-strategies-for-team-foundation-server",
		"name": "Simple Branching Strategies for Team Foundation Server",
		"text": "simple branching strategies for team foundation server in this blog post i describe some that ve found useful when using traditional source control systems like tfs . has very good and merging capabilities can help teams manage code a environment. however despite the fact provides excellent usually recommend approach to since process of easily get convoluted out even with best tools. basic idea way is have one main branch all on-going development on project. where developers do their work daily basis. once reaches point will be released production then second release created. copy pushed production. stays active most continue working as they add new features future version system. few make changes fix bugs must ironed before goes or after it been promoted following picture shows an example these concepts how branches are used over time. https://hectorcorrea.com/images/branching.png previous we see worked from week 1 through 4 green bars. at end decided had needed 1.0 created features. during next two weeks made perhaps fixed show-stopper promoting meanwhile rest continued long term 2.0 blue 5 12 time there were hot fixes bars 9 11. nice thing about concept gives us total isolation branch. exact what s updating hot-fix safe easy. ready promote major system was branched again cycle repeated: 2 while 3.0 done now purple variations small variation pattern which totally every deployed could create rather than sticking existing advantage if need still qa original life saver worth consideration. first read book software configuration management patterns: effective teamwork practical integration http://www.amazon.com/software-configuration-management-patterns-integration/dp/0201741172 by stephen p. berczuk brad appleton. you want more details post. chapter mainline line patterns 17 talks line. - dark side regardless neat your strategy might real issues process. didn t indicate 6 merged back same true 11 applied also somebody go perform nothing inherent makes merge easier. depending nature messy implement workflow conflicting minimized. inevitably find jennifer donnelly http://www.yuiblog.com/blog/2011/06/09/video-f2esummit2011-donnelly/ advise subject valuable: should happen frequently within context other words person who change soon possible. easy prevents becoming disaster. closing... ideas described neither nor only options branching. them centralized server. allow gain i.e. without having dedicated staff charge merging. although suspect apply client-server tfs. am not sure well fit distributed git."
	},{
		"id": "/blog/2011-08-27/running-visual-studio-inside-mac-os-x",
		"name": "Running Visual Studio inside Mac OS X",
		"text": "running visual studio inside mac os x lookie here...i am microsoft web developer express on my macair img src https://hectorcorrea.com/images/osxwin7.png alt windows 7 lion width 80 / when i bought last year https://hectorcorrea.com/blog/ruby-development-on-the-mac-os-x/15 to start learning ruby and rails wasn t sure how much was going really use it. overtime ve gotten familiar with it little by has become main machine at home do pretty everything including programming managing music pictures documents browsing. s the point that only reason power up laptop is need update one of personal asp.net projects or research some c# topic in particular. a nice small lenovo 3000 v200 about 4 5 years old. very but compared feels like clunker. there isn anything wrong per-se just an old machine. as time went started pondering run so don have rely two machines. are many options host virtual machines built-in boot camp software comes vmware virtualbox. case decided virtualbox http://www.virtualbox.org/ create where can install 2010. screenshot beginning this blog post shows hosted x. over other virtualization for reasons. free hard beat also because multi-platform which allowed me plenty disk space once ready transfer vm there. although configured emulate drive 20 gb itself uses 12.5 installed. perfect solid state begin with. being able different big plus me. now work all same regardless whether want program asp.net. not quite sell yet though. we ll see if changes future."
	},{
		"id": "/blog/2011-06-06/finder-error-36-on-a-nas",
		"name": "Finder Error -36 on a NAS",
		"text": "finder error -36 on a nas ever since i got my macair late last year https://hectorcorrea.com/blog/ruby-development-on-the-mac-os-x/15 ve been having issues copying files from mac to external storage device . is buffalo hd-celu2 drivestation that can be accessed as standard usb drive or network attached nas. using this windows computers for couple of years with no problems but refused work smoothly it. was able read the couldn t write when tried copy dreaded and cryptic there are several people reporting similar their macs it took me months before found solution worked me. below an example will throw file samplepdf.pdf hd-celu2-fce7 https://hectorcorrea.com/images/nas 36.png clues one things noticed in dealing issue connected directly s port rather than accessing through network. used problems. lead believe problem somehow related way itself. if formatted incompatible would have same matter how here description drive: computer problem. cannot get infamous although defeated purpose first place. wanted connect wireless at home drag darn thing around house. also not exclusive terminal shown following screenshot. by -x switch command notice failed second succeeded. http://developer.apple.com/library/mac/ documentation/darwin/reference/manpages/man1/cp.1.html prevents extended attributes resource forks. error.png macwindows.com under tip: another take smb.config fix sharing error: edit nsmb.conf streams http://www.macwindows.com/snowleopard-filesharing.html 012510e you basically need configuration tell use connecting particular add two lines /etc/nsmb.conf file: default does exist your machine didn mine create editing/creating bit tricky elevated permissions. link has detailed steps do this. aforementioned os x turn off ntfs documentation/darwin/reference/manpages/man5/nsmb.conf.5.html via smb device. turns out connects uses protocol called smb. reason see smb://somename/somepath learned page access other devices just like ftp http configures client comes vs. samba what apple 011011e even simpler article web site: v10.5 v10.6: about named smb-mounted servers -50 alerts may appear http://support.apple.com/kb/ht4017 where want this: touch /volumes/sharednas/.com.apple.smb.streams.off sharednas name shared includes great explanation heck means any side effects almost weeks turned solutions blog post. now both computers. only effect seen so far creates every these double visible computer. site indicates store leveraged avoid appledouble data fork legacy makes sense 1 being created we 2 non operating system. screenshots show folder samplepdf displayed explorer mac.png windows.jpg nuance big deal specially given many mac."
	},{
		"id": "/blog/2011-04-11/drawing-a-binary-tree-in-ruby",
		"name": "Drawing a Binary Tree in Ruby",
		"text": "drawing a binary tree in ruby img src https://hectorcorrea.com/images/binarytree simple.png alt git align left / when i started learning last year decided to implement search and some of its basic operations insert delete walk just get my feet wet on the language. trees are good exercise because you need use several features language like conditional statements loops classes while at same time solving an interesting problem. algorithm for is well documented most introductory books algorithms web. make things bit more challenging also implemented program draw so that people can see how looks it has than handful nodes. this particular case wrote small web application draws using new canvas element supported html 5. download entire source code demo site from github repo https://github.com/hectorcorrea/binary-tree play with your local environment. blog post gives short overview main methods algorithm. or properly speaking implements bst which specific version tree. cormen et al. give explanation their book introduction http://www.amazon.com/introduction-algorithms-second-thomas-cormen/dp/0262032937 . each node two children one them called subtree other right but there no order enforced per-se pp. 1178 hand always stored way as satisfy binary-search-tree property 287 : let x be if y then y.key x.key. took liberty related both terms interchangeably. please aware all references fact implementing procedures data structures e.g. www.algolist.net http://www.algolist.net/data structures/binary wikipedia http://en.wikipedia.org/wiki/binary they fairly easy ruby. class used follows gist https://gist.github.com/hectorcorrea/911769 require binarytree binarytree.new 40 tree.add 30 100 20 35 25 34 puts nodes: tree.to s out box we numbers strings any native type. types long comparable i.e. def adding nodes add shown below. first evaluates already have root don t create value done. scan aforementioned smaller values go equal greater until reach leaf node. once ve reached update point https://gist.github.com/hectorcorrea/909230 @root nil node.new @total 1 return end current true current.value current.right break else current.left walking advantages very retrieve it. process example following values: 50 200 150 will us: 200. easily recursive function. however method although elegant not efficient expected large number does recursion instead uses array stack keep track visits. found works even thousands below https://gist.github.com/hectorcorrea/911788 ignore false p processing node.value.to ignoring node.left moving next yield node.right stack.length 0 popping stack.pop got experience beauty simplicity touted features: blocks. blocks line previous code. finds simple yields caller program. allows completely independent action want perform print console code: tree.walk node.value block statement ll sophisticated review kind decoupling between iteration elements execute programming languages via delegates pointers was amazed do pretty much variation exception calculate coordinates where needs placed traverse order. calculating turned challenge final solution. basics follow: indicated. block.call root.left root.right coordinate should drawn count many side has. x-coordinate negative offset root. y-coordinate positive recurse subtrees. snippet shows https://gist.github.com/hectorcorrea/911977 parent - @x distance @y procedure reverse: https://gist.github.com/hectorcorrea/911978 three presented here only actually call appropriate parameters actual operation. these routines. calling displaying https://gist.github.com/hectorcorrea/911989 binarytreedrawer 75 125 175 drawer binarytreedrawer.new drawer.draw proc.new px py -40 -60 60 -20 plenty research best lots data. graph drawing: visualization graphs http://www.amazon.com/graph-drawing-algorithms-visualization-graphs/dp/0133016153 by tollis seems reference papers presentations cite. pages 43-45 provide plus advanced different scenarios. perhaps future enhancements suggested remove calls implementation. real page could graphic drawing. since write 5 http://diveintohtml5.org/canvas.html surface series javascript lines circles coordinates. simplified generate labels connecting https://gist.github.com/hectorcorrea/912001 @tree circle centerx offsety label 7 notice merely creates arrays calls. later inserted user renders browser. run either random own drawn. laptop up 10 000 disadvantages area-efficient leads wide drawings. effect 500 https://hectorcorrea.com/downloads/tree500.png dramatic generated too. were would 115 foot tall basketball court 94 https://hectorcorrea.com/downloads/tree5000.png almost 4mb size might crash browser trying display why am making hyperlink. mac png ok safari firefox problems coffeescript https://hectorcorrea.com/blog/drawing-a-binary-tree-in-coffeescript/3"
	},{
		"id": "/blog/2011-02-21/git-basics",
		"name": "Git Basics",
		"text": "git basics img src https://hectorcorrea.com/images/git.png alt align left / this blog post is a beginners guide written by beginner on how to perform basic version control operations with including initializing repository adding files it and using branches. the goal of describe use in your local machine for control. future i ll cover github collaboration other developers. everything that show done through s command line via mac os x terminal. steps should be very similar operating systems but have not tested them outside mac. installed my we can issue following commands from terminal find out if what installed: which --version tells us our path return something like /usr/local/git/bin/git . returns nothing means probably machine. figure are using. screenshot shows got machine: https://hectorcorrea.com/images/gitversion.png you pre-compiled installer http://help.github.com/mac-git-installation/ install computer. creating once pretty simple. let start brand new test folder asking its status. mkdir testgit cd status previous call will along lines or any parent directories ok since haven t told anything about folder. put under terms create simply init command. several hidden folders inside uses these keep track changes files. now see reports rather than an error did before issued results running two https://hectorcorrea.com/images/gitinit.png notice branch called master has been created there commit at point. officially do monitored git. saving text file named file1.txt into again time report below one add https://hectorcorrea.com/images/gitonefiletoadd.png reporting exist added words yet. go ahead as suggested then check again. now. committed. https://hectorcorrea.com/images/gitonefileadded.png know needs tracked content hasn repository. need another order actually committing existing -a -m first result getting committed https://hectorcorrea.com/images/gitonefilecommitted.png point more much up likewise make already e.g. don special able just edit when ready changes. example this. second https://hectorcorrea.com/images/gitonefilecommitted2.png note microsoft visual source safe vss team foundation system tfs users: term concept checking tfs. however checkout refers process switching totally different meaning mind. view history few review changed each change took place who made change. log http://www.kernel.org/pub/software/scm/git/docs/git-log.html gives list commits performed current branch. http://www.kernel.org/pub/software/scm/git/docs/git-show.html affected particular whatchanged http://www.kernel.org/pub/software/scm/git/docs/git-whatchanged.html were specific commit. also blame http://www.kernel.org/pub/software/scm/git/docs/git-blame.html ve love lot options used entire could them. best get information docs http://www.kernel.org/pub/software/scm/git/docs/ web site. displays sample after commits. https://hectorcorrea.com/images/gitlog.png important aforementioned tools their although comprehensive exactly easy navigate they plain text. comes graphic user interface invoke tool issuing gitk format easier opinion still rudimentary compared perhaps better might worth researching. 1 2 was 3 file. https://hectorcorrea.com/images/gitk.png branches biggest advantages code allows projects things without having worry messing good working system. sandboxes play sandbox until happy merge back system...or discard altogether end being tutorial http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html page says cheap so way try out. master. http://www.kernel.org/pub/software/scm/git/docs/git-branch.html want exact copy both listed screenshot. asterisk next currently https://hectorcorrea.com/images/gitbranch.png switch forward localized say regular original https://hectorcorrea.com/images/gitbranchchanges.png http://www.kernel.org/pub/software/scm/git/docs/git-merge.html another. assume bring contents branch: https://hectorcorrea.com/images/gitmerge.png automatically update updated news delete deleted sandbox. some additional arguments configure merged. detects merged automatic ask verify manual take look documentation details summary seen started went reviewing separate merging mentioned beginning explore collaborate others work remote repositories gitgub. references plenty reviewed entry advanced topics. selected found useful. great start. learned posted tutorial. http://www.kernel.org/pub/software/scm/git/docs/user-manual.html official site ton http://git-scm.com/documentation"
	},{
		"id": "/blog/2011-01-24/ruby-development-on-the-mac-os-x",
		"name": "Ruby Development on the Mac OS X",
		"text": "ruby development on the mac os x img width 320px height 240px align left src https://hectorcorrea.com/images/mac macair.jpg alt macair / a little more than month ago i got myself macair. even though ve own computers since mid 80s this is first time that buy machintosh. reason bough rather pc because wanted to start experimenting with web tools exist for non-windows environments . although been software developer 15 years all my experience microsoft windows and thought about other half of world using. most people would probably thing want writing applications iphone or but in reality experiment applications. will write an app two just see what it s like real motivation using tools. not say am abandoning ecosystem else out there. there are plenty successful sites e.g. google facebook developed those like. programming language decided learn along popular framework rails over following months be posting experiences developing from perspective somebody very familiar comfortable microsoft/windows development. why 180px https://hectorcorrea.com/images/ruby.jpg when new wasn t too thrilled perl php phyton. don really know learning any languages didn excite me despite fact they ones used some including facebook. http://www.ruby-lang.org gave different vibe seem passionate excited rails. both them quite build which interested in. addition lot ideas asp.net mvc main platform these days were taken made think definitively gained his presentation 10 things every java programmer should http://onestepback.org/articles/10things/index.html jim weirich has great quote: doesn affect way you worth knowing -- alan perlis so does offer how learned stop worrying love bomb introduced ruby-lang.org http://ruby-lang.org site: dynamic open source focus simplicity productivity. elegant syntax natural read easy write. digging deeper found object oriented provides garbage collection borrows interesting features functional something meaning look into indeed clean syntax. however also few about. particular interpreted statically typed strongly typed. after code c# many had hard imaging features. background slides by programmers http://www.softwaresummit.com/2006/speakers/bowlerrubyforjavaprogrammers.pdf mike bowler interesting. presentations packed information makes java/c# highlight its strengths. topics cover include: nature factories mock objects trivial reflection level compared can do nil means never get null pointer closures: block address biggest concern namely quote bob martin he mentions safety net provided static as important your covered unit tests test catch type errors you. sure agree statement 100 certainly point though. find articles at ruby-doc.org http://ruby-doc.org/whyruby/ site. one nice box comes runtime libraries several ruby. feature playing without having worry much where binaries compile code. case came 1.8.7. version https://hectorcorrea.com/images/rubyversion.png beginning https://hectorcorrea.com/images/beginningrubybook.jpg book have ruby: novice professional http://www.amazon.com/beginning-ruby-professional-peter-cooper/dp/1430223634/ peter cooper resource program going. job covering everything make installed machine install basic class advanced exception handling database access ruby-specific techniques implement enumerators yield operator mix-ins blocks frameworks sinatra. highly recommend anyone starting interpreter built editors debuggers ide control visual studio was shocked no standard operating system. able gather developers editing their variety text provide color completion indentation more. debugger isn concept intellisense either. crank up pretty fast. download free tool called xcode http://developer.apple.com/technologies/tools/xcode.html full blown supports integration. powerful development: textmate http://macromates.com/ seems favorite keyboard shortcuts running integration subversion git goodies. editor far. end buying license next days. update: indicated follow post https://hectorcorrea.com/blog/web-development-on-the-mac-os-x-part-ii/5 ended going sublime 2. textwrangler http://www.barebones.com/products/textwrangler/ somehow workflow good cannot beat price. here screenshot textmate: textmate.jpg use edit common among nix users vim emacs. yet feel stone age. once curve might steep. environments. shocks gotten still miss it. argument if testable properly structured small methods classes single responsibility need less critical. true dumbfounded lack one. hope ted neward prediction 2011 http://blogs.tedneward.com/2011/01/01/tech predictions edition.aspx apple starts feeling pressure deliver mired mid-90 metaphor true. clarify allows step through nothing studio. old article 7 systems reviewed http://www.smashingmagazine.com/2008/09/18/the-top-7-open-source-version-control-systems/ smashing magazine idea available x. mentioned far only experimented pleased operations check due part installation process incredible painless. pleasantly surprised well documented http://help.github.com/mac-git-installation/ started http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html are. did notice light-weight traditional system team foundation sourcesafe. bit depend command line same amazed simple becomes github push cloud keep copy outside machine. summary spare sudden looking making changes checking local remote repositories. nearly proficient comfortable. fun ride. ll blogging eventually ii update 18 later strange journey becoming https://hectorcorrea.com/blog/my-strange-journey-to-becoming-a-ruby-developer/82 doing professionally years."
	},{
		"id": "/blog/2010-11-29/returning-http-404-in-asp-net-mvc",
		"name": "Returning HTTP 404 in ASP.NET MVC",
		"text": "returning http 404 in asp.net mvc a few weeks ago i noticed that when users of my site request blog topic does not exist although was displaying user friendly message indicating the proper status code to indicate page found . this approach is typically problem if visiting human don t really care about codes but it important web crawler like googlebot or yahoo slurp because for these non-human very as means something concrete them digging deeper into issue realized doing what known soft which good crawlers fools thinking there valid an invalid url. case 200 ok rather than found. fact so common both and sites talk here http://www.google.com/support/webmasters/bin/answer.py answer 181708 http://help.yahoo.com/l/us/yahoo/search/webcrawler/indexing-12.html root causing controller looked similar this: public class blogcontroller : actionresult sample1 string topicname bool istopicfound somelogic var route new routevaluedictionary error action notfound return redirecttorouteresult // regular display displays nice via am using browser gets 302 followed by wanted. below trace with fiddler. notice how original /blog/sample1 got response at url then /error/notfound turn second indeed returned ok. plus https://hectorcorrea.com/images/http 200.jpg throwing httpexception decided update handle correctly first thought throw from example along lines: sample2 false can either be handled s onexception method on application global.asax. whatever we use need sure rely previous otherwise ll back trap. all customerrors section web.config could redirect default they see message. however just actually makes sense giving parameter where configured clearly named defaultredirect address trying solve. way turns you directly change still view want simple shown following example. forced selected. sample3 httpcontext.response.statuscode httpcontext.tryskipiiscustomerrors true //prevents standard iis showing. httpcontext.response.clear viewresult viewname accomplishes goals: sees show fiddler trace. /blog/sample3 returns without redirect. 404.jpg line 7 required hint our own page. now somebody tries access get correct code. try hitting link http://www.hectorcorrea.com/blog/a-non-existing-topic looking returned. october/2012 entire different base mvc. information post accurate though. couple gotchas while slightly any other exception. decorate your controllers handleerror attribute configure will rendered exceptions httpexceptions stackoverflow http://stackoverflow.com/questions/812235/error-handling-in-asp-net-mvc/812344 812344 has more issue. gotcha ran smaller 513 bytes google chrome render its view. been documented before http://perso.hirlimann.net/ ludo/blog/archives/2008/09/chrome-and-404s.html only happens chrome. most likely won production views are larger 512 time content considered should keep mind testing might off."
	},{
		"id": "/blog/2010-11-08/log4net-thread-safe-but-not-process-safe",
		"name": "Log4net Thread-Safe but not Process-Safe",
		"text": "log4net thread-safe but not process-safe a few days ago i was struggling with problem http://logging.apache.org/log4net/index.html in web application. have used many applications before little or no this case even single user hitting the site seeing strange logging behaviors. my some of log entries were being logged others . application question is c# asp.net mvc running under iis. am using true and tried rollingfileappender it couldn t been more typical use yet weird things. here are symptoms that seeing: others. issue happening when only on site. one our development servers local box. since able to rule out possibility iis might enough rights write folder configured for applicable if wouldn nothing would be at all. addition sure due heavy utilization sort race condition which typically handles nicely anyway. fact server 6 machine 7 made me suspect different versions culprit wasn about that. turning internal diagnostic begin troubleshooting turned s option see itself reporting problems give hint. you familiar feature check how do enable debugging section faq http://logging.apache.org/log4net/release/faq.html dump all its information file called logdiag.txt after times went what lo behold noticed there three files generated. following picture shows looked machine: https://hectorcorrea.com/images/log4netdiag.jpg opened errors indicated there. however other two ones prefixed guid had error: terminal log4net:error unable acquire lock c: dev sandboxmvc app data logfile. process cannot access logfile because by another process. openfile call failed. houston we problem... ok so indeed problem. clearly telling having writing file. good. least going crazy. come now happens box answer way where happening. turns particular known as garden means will launch multiple worker processes handle requests. from configuration setup running. configure processes. can 4.0 pool maximum https://hectorcorrea.com/images/iisworkerprocesses.jpg than i.e. spun serve requests your did then attempt locking issues arise. once realized finding solution quite easy. also explained why saw machine. smart name each differently remember them didn experience same having. discuss work around let clarify wrong per-se actually good server-class discussion beyond scope blog post lesson learned need take into account configuring address ways garden. minimal http://logging.apache.org/log4net/release/sdk/log4net.appender.fileappender.lockingmodel.html duration operation. reduces chances collide they keep locked minimum. guarantee load collide. additionally performance penalty opening closing entry. too high worth testing decide option. below an example notice lockingmodel setting line 2. code appender logfileappender type log4net.appender.rollingfileappender log4net.appender.fileappender minimallock / param value appendtofile datepattern .yyyy-mm-dd .txt rollingstyle composite maxsizerollbackups 5 maximumfilesize 100kb staticlogfilename layout log4net.layout.patternlayout conversionpattern logentry date -5level logger 2 - message newline second care make writes own collisions ll simultaneous active exclusive these shared across method guaranteed allows fast method. disadvantage look rather consolidated one. create has patternstring inclusion pattern processid unique id. log4net.util.patternstring reason update nov/2012 months reader alerted scenario described disable overlapped recycle set false default value. noted: restarts brief period time w3wp serving gardens disabled. cases large number outstanding may longer brief. manifest symptom described. -- greg askew screenshot pool: https://hectorcorrea.com/images/iis disableoverlappedrecycle.png thought lot people get confused documentation http://logging.apache.org/log4net/release/sdk/log4net.appender.rollingfileappender.html says thread safe. reality takes http://stackoverflow.com/questions/1294668/log4net-fileappender-not-thread-safe/1294842 1294842 http://stackoverflow.com/questions/4098409/thread-safety-of-log4net/4102027 4102027 makes thread-safe. run tests prove http://stackoverflow.com/questions/1519211/multithread-safe-logging/1520449 1520449 dec/2014: apparently found deadlock-prone https://issues.apache.org/jira/browse/log4net-431 thanks john zabroski heads up does mean fault such thing ability concurrently text relational databases repository data. summary environment must ensure uses per"
	},{
		"id": "/blog/2010-10-29/encrypt-and-decrypt-a-string-in-c-sharp",
		"name": "Encrypt and Decrypt a string in C#",
		"text": "encrypt and decrypt a string in c# this blog posts presents an easy to use class strings .net. although the system.security.cryptography http://msdn.microsoft.com/en-us/library/system.security.cryptography.aspx namespace .net framework provides wealth of classes values it seems that msdn falls short providing good simple example on how these for most common request: string. presented allows you with following lines code: code encryptionpassword supersecret texttoencrypt quick brown fox jumps over lazy dog encrypted crypto.encrypt original crypto.decrypt disclaimer: post is just one many ways if need incredible confidential information like nuke launch codes should check specific books cryptography. having said probably arrived because are search encryption s case then you. below strings. all 60 including curly braces. can copy paste your project voil√† ready bit curious remainder explains works. // based book 3.0 nutshell by joseph albahari pages 630-632 from stackoverflow somebody called brett http://stackoverflow.com/questions/202011/encrypt-decrypt-string-in-net/2791259 2791259 static public crypto private readonly byte salt encoding.ascii.getbytes ent3r own s@lt v@lu h r3 var algorithm getalgorithm encryptedbytes using icryptotransform encryptor algorithm.createencryptor algorithm.key algorithm.iv bytestoencrypt encoding.utf8.getbytes inmemorycrypt return convert.tobase64string encryptedtext descryptedbytes decryptor algorithm.createdecryptor convert.frombase64string encoding.utf8.getstring performs in-memory encrypt/decrypt transformation array. data transform memorystream memory new stream cryptostream cryptostreammode.write stream.write 0 data.length memory.toarray defines rijndaelmanaged sets its key initialization vector iv received. create salt. rfc2898derivebytes declare we going rijndael ve got. int bytesforkey algorithm.keysize / 8 bytesforiv algorithm.blocksize key.getbytes has four methods. methods crypt ones calls values. other two used internally class. process encrypting requires few steps not evident first comers. involves setting up will be pushing through it. our since want cryptography don t provide overloads out box ll take extra account this. method takes care steps. let review detail. thing do define what encryption. more later. ability either or decryptor. obviously encryptor. second convert bytes received value encrypt. important step as work already know encoded unicode http://csharpindepth.com/articles/general/strings.aspx such they hold characters pretty much any language world. some than stored therefore number get line 15 might larger only deal ascii give thought translate single character represented 65 - value. however multiple stored. japanese 12453 maps three 227 130 166. so now have defined along corresponding converted pass finally perform . talk about details section but say encrypts gives us back bytes. end result. see long there lot on. exactly i would call self no wonder commonly asked questions message boards declares keys. supports several algorithms each them different strengths weaknesses. particular http://en.wikipedia.org/wiki/advanced standard find web purpose uses pair known set both calculated provide. look detail at method. generator pseudo-random instance needed algorithm. notice required depending keysize blocksize technically could skip manually vector. make sure enough fill problem was too 10 expects 32 generate even short. streams process. very large blocks text while consuming little memory. nice feature entire documents without load document chunk. drawback must go when small example. hides read dump resulting into another stream. password 1encryptionpassword1 receive know. alone code. hand level does kept secret useless password. exact same which why declared member rather parameter feel free update configurable implementation. final words reverse won elaborate things consider choosing algorithm: one-way meaning cannot hashing perfect storing database. allow decryption. within symmetrical decryption whereas others asymmetrical keys keep mind deciding application. references indicated top taken excellent http://www.amazon.com/3-0-nutshell-desktop-reference-oreilly/dp/0596527578 ben brett. summary options 627-638"
	},{
		"id": "/blog/2010-09-27/ajax-calls-with-jquery-in-asp-net-mvc",
		"name": "AJAX calls with jQuery in ASP.NET MVC",
		"text": "ajax calls with jquery in asp.net mvc one of the nice things about is ability to easily integrate standard web libraries like .net applications. this blog post i am going show how execute from an application. first example shows do it http get call and second uses call. both examples use json return type. probably simplest on but should be ok general concept. page when user clicks click here hyperlink a request made server retrieve time display user. part that executed without making full reload as can seen screenshot below notice was originally loaded does not change after clicked retrieved time. again terribly exciting good enough for our purposes. sample 1 https://hectorcorrea.com/images/ajaxsample1screen.jpg view makes possible rather simple s composed following elements script tag head include library block declare code html render you just need add looks this: id head1 runat title /title src : url.content /scripts/jquery-1.4.1.js type text/javascript /script /head also very we are only displaying some text coming line 2 rendering let invoke placeholder value returned by there no javascript block. design ll describe reason next paragraphs see hijax section below. h2 /h2 p at: system.datetime.now.tostring /p href getservertime ajaxlink /a current div currentservertimediv /div course interesting actual wires anchor document .ready function //setup .click event event.preventdefault getcurrentservertime // make .getjson null updateservertime result update var message is: result.servertime .html has three main sections. name called . customary setup ready sure dom been fully constructed even if all resources e.g. images have downloaded. read more http://api.jquery.com/ready/ case replacing own function. will link. executes getjson url passing arguments executing upon completion. controller hit. later. third finishes its execution. returns object property servertime construct defined code. sent through controller. perform operation merely calculating view. shown below: /ajaxsample/getservertime public actionresult viewmodel new models.ajaxsampleviewmodel viewmodel.servertime datetime.now.tostring request.isajaxrequest jsonrequestbehavior.allowget fallback supported browser client results. why able result. resulting javascript: https://hectorcorrea.com/images/ajaxsample1json.jpg might wondering clause explicitly precaution support or disabled. although almost always enabled most desktop laptop computers mobile devices. wired than directly could wouldn t worked instead which enabled. disabled therefore fired already hit getcurrentserver maps method approach known http://domscripting.com/blog/display/41 way provide progressive enhancement your pages. using request. information textboxes e-mail comment asynchronous server. https://hectorcorrea.com/images/ajaxsample2screen.jpg previous form named savecommentform two textbox controls submit button. newcomment where results added comment. wire rendered described before. html.beginform savecomment ajaxsample formmethod.post address: html.textbox emailaddress br / enter comment: html.textarea input save powers similar used .submit response .ajax url: form.action type: form.method datatype: data: .serialize success: commentsaved thank result.emailaddress br/ pre result.comment /pre comments technique aforementioned redirect issuing original location would requesting delivered us notation. completes want fire picture values passed at runtime data parameters points url. https://hectorcorrea.com/images/ajaxsample2ajax.jpg page. process essence before example. indicate something then back called. plan. /ajaxsample/savecomment httppost string actually go savedat ...and relatively straightforward within views controllers. references took idea book action http://www.amazon.com/asp-net-mvc-action-jeffrey-palermo/dp/1933988622 jeffrey palermo et al. pages 195-214 addition online documentation joe brinkman e-book developers http://www.wrox.com/wileycda/wroxtitle/jquery-for-asp-net-developers.productcd-0470478454.html great place beginners. best spend 7 bucks other buying latte croissant local coffee shop steve sanderson pro framework http://www.amazon.com/asp-net-framework-second-experts-voice/dp/1430228865 explanation applications 517-559 worth checking out."
	},{
		"id": "/blog/2010-05-17/password-recovery-in-an-asp-net-mvc-project",
		"name": "Password Recovery in an ASP.NET MVC Project",
		"text": "password recovery in an asp.net mvc project while rewriting one of my web sites with i noticed that although support for the membership provider comes included out box a 2 not all options are fully implemented to same extend they brand new webforms project. example option reset your own if you forgot old is available following project: create user login change adding turned be pretty easy as core functionality already exists and it s just matter calling from application. update on november/2012 please aware wrote this blog post when had come out. ideas apply newer versions but code will slightly different. membershipservice accountcontroller referenced actually class default 3 have looked see what take adapt 4 though. process goes like this: logon view users can go passwordreset indicates his/her username then sent questionandanswer enters answer their security question finally passwordresetfinal message indicating has been e-mailed them. rest describes details how works. source also link at bottom post. views controllers first thing did was added start process. wired method called . https://hectorcorrea.com/images/password logon.jpg secondly created http-get very simple passwordreset.aspx allow enter so we password. extremely only textbox where name. reset.jpg public actionresult membershipservice.passwordresetenabled throw exception allowed return http-post pick up data continue controller decides whether next step or need ask him/her before required honor requiresquestionandanswer configuration setting provider. httppost string membershipservice.requiresquestionandanswer redirecttoaction else membershipservice.resetpassword getloginurl configured require resetting route view. merely two labels another question. question.jpg questionandanswerview fetches entered viewdata membershipservice.getuserquestion by time get information namely name hence call happens. b /b final last displays telling generated final.jpg changes model every accountmembershipservice handle information. much more than wrapper membershipprovider operation provides functions. actions point instance calls retrieve user. notice job forward getuserquestion membershipuser provider.getuser false null found user.passwordquestion methods do plus few properties expose couple features were exposed implementation. summary... indicated beginning download working site updated here https://hectorcorrea.com/downloads/passwordrecoverymvc.zip keep mind assumes its database system. readme.txt file inside further instructions run sample."
	},{
		"id": "/blog/2010-04-02/yield-return",
		"name": "Yield Return",
		"text": "yield return even though the statement was added to c# since version 2.0 around 2004 i never quite understood how it really works. a few days ago while going through some tutorials saw sample of code that used and decided finally look under covers learn well do you understand at below answer these two questions: what is output this can explain why class yieldsample static void main string args foreach int in yieldsample.getsomeintegers console.writeline 0 console.readline public ienumerable getsomeintegers 100 200 300 first question pretty simple: 300. tricky part explaining come arrives output. knows needs pick up value loop second third one reason for behavior compile time rewrites with into state machine has logic prepare so call picks on forth. pseudo-code generated basically looks like this: private bool getnextelement switch case 0: // currentvalue 1 next true 1: 2 2: 3 3: -1 false trying works found great articles more detail. particularly liked http://shadowcoding.blogspot.com/2009/01/yield-and-c-state-machine.html by erik forbes c#: dynamic iterators http://www.devsource.com/c/a/languages/c-dynamic-iterators-with-yield-return paul kimmel. actually gave me clue use reflector compiler. if are probably wondering generation when method not as straightforward little example just returns three hard coded values. darn good. machines http://en.wikipedia.org/wiki/finite-state have been studied lot people very understood. however fun wrote examples my own nested statements reviewed compiler generated. result always same: resulting returned values expected."
	},{
		"id": "/blog/2010-03-24/the-design-of-design",
		"name": "The Design of Design",
		"text": "the design of img width 100 height 144 align left src https://hectorcorrea.com/images/designofdesign.jpg / earlier this month i received a draft manuscript frederick brook s latest book essays from computer scientist http://www.amazon.com/design-essays-computer-scientist/dp/0201362988 sup 1 /sup in which he reviews both what is and how process works. although there plenty literature on concept brooks feels are several good reason to write another subject. first that mentions has changed lot since world war ii new challenges have rarely been discussed. now team activity rather than an individual one. challenge unlike designers previous generations nowadays cannot longer built with their own hands they design. instead designs captured models build by somebody else p. xi second why consider worthwhile writing much mystery remains subject becomes evident when we try teach students well uses his six decades experience help expand knowledge works it. does not attempt find or describe science fact considers such goal impossible misleading. tone form few opinionated xii divided sections as follow: section i: ii: collaboration telecollaboration iii: perspectives iv: dream system for designing houses v: great vi: trips through spaces case studies found three fascinating but was thrilled last sections. review am going focus mostly some selected chapters chapter - 120 179 https://hectorcorrea.com/images/notredame.jpg addresses basic question starts following definition verb oxford dictionary: plan scheme arrange conceive mind later execution 4 proposal dorothy sayers steps idea conceived mentally outside time space then it implemented finally implementation used someone else. musical composition mental formulation composers paper ink conductor execute orchestra. software project same happens its designer conceives will work source code executed consumed users. one questions tries address whether invariant properties itself across multiple disciplines like construction buildings development other media. researched wide variety authors sources addressed throughout history including philosophers scientists 2 engineers think rational model describes calls process. refers orderly systematic step-by-step things. cites proposed german mechanical people engineering field. important highlight support useful present reasons discusses book. primary series secondary goals. after goals defined proceed define utility functions weight each against entire constraints resources so can simple approach. puts it: goes makes decision. within narrowed decision at node could taken more paths exploration tree p15 waterfall representation different happen sequentially. fallen out fashion among developers realized fit realities still enticing many . proof general industry contracts require clear requirements upfront accurate estimates timelines fixed bid contracts. these only possible where completed ahead know exactly be implemented. make interesting observation notes actually very natural evidence arrived pp. 29-30 3 wrong 150 https://hectorcorrea.com/images/whatswrong.jpg presented quickly discredits explains just ideal somehow ought real life 22 dedicates if work. states don t always onset most times changes evolve ideas explored. indicates hardest part deciding points iterative also design-goal-setting iterative. anyone worked probably obvious all stories tell typically go back forth customer decide really need once product take shape. end initial learn about problem re-evaluate resources. thing typical change evolves solution developing. assumed easily evaluate value adds goodness speak. practice hardly decisions interconnected another. example particular might affect significantly performance cost integration. evaluating objectively affects whole close impossible. reality way go. page 257 talking experiences boldest whoever made them accounted outcome. bold were due sometimes vision desperation. gambles requiring extra investment hopes getting better result. closes third sentence: harmful must outgrow 5 https://hectorcorrea.com/images/spiral.jpg describing argues dominant replace reasoning advocating opposed let surface organically afraid push risk having inappropriate dominate landscape did development. suggest use barry boehm spiral building model. suggests closely resembles addition easy memorize visualize should eradication you interested quick summary wikipedia http://en.wikipedia.org/wiki/spiral original 1988 ieee web site http://www.computer.org/portal/web/csdl/doi/10.1109/2.59 reference newer unified http://en.wikipedia.org/wiki/unified scrum http://www.controlchaos.com/about/ variations originally boehm. 80 https://hectorcorrea.com/images/train.jpg two 1900. doing teams solo distributed via telecommunication tools collocated teams. would agree self-evident truth certainly universally true p 64 human kind working closely. 6 question: single shifted attribute shift foremost technology sophistication place hundred years. level specialization needed areas forced become experts certain therefore bring together get picture any given say bridge cell phone large system. talks necessity accelerate delivery competitive environment 65 paramount day age right being market driving force behind companies designs. come without cost. costs incurs person problem. partitioning job teammates learning communication control. comes however things biggest conceptual integrity harder maintain keep subconsciously affected split minds. norm exception proceeds give achieve architect charge making sure achieved even though members ideas. words serves during agent approver advocate user stakeholders 71-72 two-person special approach forces state turn validation 81-82 scale team. aspects benefit collaboration. highlights view brings needs sessions. 7 faces. aware increase 93 provides face beginning crucial eventually distributed. iii https://hectorcorrea.com/images/designperspective.jpg 8 schools thoughts rationalists rene descartes empiricists galileo galilei apply 9 explicit designed because tend assume sharing assumptions not. this: common set distinct implicit ones 115 soon trouble strikes: rudely confronted know. effort him ask otherwise asked until later. unmitigated 10 119 summarizes succinctly: particularly name scare resource explicitly track publicly control firmly. far insight advice rest cover blog post. iv v vi alt https://hectorcorrea.com/images/punishment.jpg mentioned entry architectural buildings. 204 17 presents convey machine 18 opposite using visual clues audio tactile feedback. problems. difficult processes related role opposing views between aim predictability friend 233 20 developer designers. spaces: dedicated seven participated. big disappointment me. had wrote meant add study included includes famous system/360 architecture ibm operating projects managed 1960s personal constructions house architectures. reading recommend improving understanding create solutions. references pearson education 2010 1/24/2010"
	},{
		"id": "/blog/2010-03-01/flow-second-generation-lean-product-development",
		"name": "Flow: Second Generation Lean Product Development",
		"text": "flow: second generation lean product development img alt the principles of flow width 120 height 178 align left src https://hectorcorrea.com/images/flowbook.jpg / last few weeks i ve been reading book http://www.amazon.com/principles-product-development-flow-generation/dp/1935401009 by donald reinertsen sup 1 /sup in which he describes what calls lead development. from perspective software products and this review will highlight examples on that area. however s is about general e.g. a new drug or cell phone not particular. paradigm for although it could be called chooses to call flow-based differences exist between manufacturing unlike primarily deals with predictable repeatable tasks homogeneous delay costs task duration these situations are norm. almost definition hardly ever have very high variations. case uncommon teams dealing problems they never solved before writing brand system technologies team. likewise cost delaying implementation feature versus fixing specific bug can widely different. chapter one starts describing twelve critical traditional orthodoxy including: failure correctly quantify economics blindness queues worship efficiency hostility variability institutionalization large batch sizes underutilization cadence managing timelines instead absence work-in-progress constraints centralized control. remaining chapters presents eight ideas/themes suggests address problems. size wip synchronization control fast feedback decentralized some ideas already popular thanks wide spread adoption agile processes. example scrum recommendation short sprints helps reduce . daily collaboration developers qa during sprint as well frequent demonstrations advocated allow take place. other his like mainstream yet. processes kanban 2 3 making strides areas clarify why changes important general. topics premise we do make money p.15 yet most cannot their products. view currently focus proxy variables calculate economic impact rather than using real objective strong life-cycle profits /strong p.29 typical variable cycle-time. typically try optimize cycle-time shorter. surface sounds all good. how much actually terms profits. an when team objectively value profit working b. if does know bottom line decision makes more sense company without knowing two features might decide work because appealing needed b busy wrapping something else. knew bring four times delivered first act different rearrange complete a. points out having common unit measure solves many allows decisions place even keel measurement at moment. proposes given choices implement rush release market use comprehensive approach wait months. either correct life cycle product. right choice depends point time. rushing being too its doing technical debt incur outweigh benefits things should considered measured same unit. indicates research tend think decisions. asking people responses vary 50 ratio. answers such range obvious measurement. contains nineteen help good based economics. provide silver-bullet provides start focusing including paying attention p. 31 u-curve optimizations p.35 trade-off 37 marginal p.45 where management queues. problem understood has optimized years. entire books written manage bottlenecks assembly lines prevent inventory accumulation goal http://www.amazon.com/goal-process-ongoing-improvement/dp/0884270610 eli goldratt. there little literature addresses effects progress equivalent inventory. developed but production under still tested. reasons so poorly managed invisible. you walk around plant see lying floor. sits shop floor easily identified looking queues: items ready coded tested released on. wondering care no associated storing cause several unwanted side longer time increased risk overhead lower quality less motivation queue larger test need go released. number then also translate higher version system. theory formula. layman formula says average determines 112. means reducing size. complex solutions long adding staff methods experienced 2-week cycles old-fashion multi-month cycles. engineering 4 david anderson gives explanation apply another reference learn subject. after aware importance moves while limiting nature amount fundamental random variations 143 beginning subject manufacturing. 6 applied telecommunication networks deal probably would systems instead. movement industry raise awareness causes look http://www.limitedwipsociety.org/ works technology organizations anderson. summary found interesting easy read. concepts described understand recommendations pull important. references celeritas publishing 2009. kanban: successful change unpublished manuscript november http://www.kanban101.com http://www.kanban101.com/ quick introduction applying business results prentice hall 2003."
	},{
		"id": "/blog/2009-06-03/team-dynamics",
		"name": "Team Dynamics",
		"text": "team dynamics a few years ago during my scrummaster certification our instructor talked about the different development stages that teams go through. he used tuckman s model which includes four stages: form storm norm and perform. in this start at stage when they are first put together. is honeymoon period of new spirits high everybody optimistic but work just to begin. after once has commenced members try find their place team. phase into as on starts working cohesive unit. finally some reach another called perform become performance teams. i ve always found knowledge incredible valuable. knowing through these normal behavior very important. leader also important recognize need leadership styles stages. blanchard et al. have nice chart where explain kind recommended each them: https://hectorcorrea.com/images/leadershipstyles.jpg needs significant amount direction newly formed little support since typically excited by being part moves second tension among raise act coach provide both for get rough recognizing other talents trust one another. commonly misunderstood bad tend feeling down discrepancies between initial hopes reality kicks 4 politeness fade people more roles so argue things were left unsaid or not realized met 3 . however indicates calling like adolescence period. process develop. you should be careful help grow out instead trying prevent altogether letting perpetuate stage. article changeminds.org provides guidelines how manage including: manager here assert role draw resolve differences might otherwise bubble along under surface causing continuing cohesion problems. storming can reduced clarifying goals individual objectives. know what success means focused. moving third increases keep supporting make sure kept. point clear idea task hand direction. already making decisions step back let flourish. reaches fourth shift delegation own itself. performing beside group authors proposed main same. phases lifetime. an thing note previous example reached phase. caused changes goals. software could result adding developers changing goal market pressures. small say going from six enough disrupt established aware accordingly. unfortunately common occurrence qa resources bonded. only it practice push testing system towards end cycle will bugs code slow exacerbates impact likelihood taking less productive storm. better approach case would include beginning effort. if don t luxury add address functional bring take away post twofold. remember all process. your there lot material regarding productivity. good reading alasdair white paper comfort zone management 5 references 1 copy bruce original 1965 developmental sequence groups http://findarticles.com/p/articles/mi qa3954/is 200104/ai n8943663/ tag content col1 2 wikipedia http://en.wikipedia.org/wiki/forming-storming-norming-performing changingminds.org http://changingminds.org/explanations/groups/form perform.htm explanation plays was taken minute builds ken william morrow 1990 page 70. http://www.pm-solutions.com/performance managementapril2008.pdf"
	},{
		"id": "/blog/2009-04-18/transactionscope-complete-maybe",
		"name": "TransactionScope.Complete Maybe",
		"text": "transactionscope.complete maybe during a training class this week i learned that the complete method in transactionscope works different from what have always thought. ve thought when you issue call to transaction is either committed or get an exception if cannot be committed. my mind once returned it was sure bet successfully turns out not necessarily true. following code snippet shows typical usage of connecting sql server database. steps are basically start few commands and commit transaction. real application will more than one command perhaps nested transactions but idea pretty much same. using tx new sqlconnection conn connstring conn.open string insert into mytable id name values 1 test sqlcommand command.executenonquery // console.writeline has been issued stop press enter continue... console.readline tx.complete yikes didn t throw even though stopped. particular example however am purposely forcing error condition by pausing program right before then manually shutting down finally letting continue its execution. definitively something do point emulate happens goes . on surprise case. executed came back with no indication happened. below output gave me: https://hectorcorrea.com/images/txcomplete.jpg notice how lines after were which means thrown at time come possible does mean way knowing succeeded failed. kind big deal. here work quite did. msdn http://msdn.microsoft.com/en-us/library/system.transactions.transactionscope.complete.aspx says: satisfied all operations within scope completed should only inform manager state across resources consistent can very good practice put as last statement block. ... actual between end object created did create occurs whenever called owner committabletransaction object. calls resource managers informs them rollback based whether clearly says statement. indeed let execution reach got: https://hectorcorrea.com/images/txcompleteex.jpg knowledge s review happened line already shutdown. informed far we concerned could why problems. next reached tried detected wrong threw indicating doubt there also inner elaborated transport-level occurred case result .net being able confirm not. best it. actually really good. similar situation where happen production environment would too. know for wasn since shutdown moment wouldn us lost connectivity sent. say go rather our network couldn might received just successfully. correct ask for. make matters interesting use handle against other databases. glad whoever wrote framework these conditions so don to. check mdsn documentation http://msdn.microsoft.com/en-us/library/system.transactions.transactionscope.aspx writting transactional applications http://msdn.microsoft.com/en-us/library/ms229973.aspx information."
	},{
		"id": "/blog/2009-02-02/the-model-view-controller-is-dead-long-live-the-model-view-controller",
		"name": "The Model View Controller is dead, long live the Model View Controller",
		"text": "the model view controller is dead long live last few days i ve been reading microsoft .net: architecting applications for enterprise http://www.amazon.com/microsoft-net-architecting-applications-pro-developer/dp/073562609x by dino esposito and andrea saltarello. on chapter 7 talk about presentation layer in particular they touch mvc presenter mvp pm design patterns. really like how demystify put them context. start describing these patterns have evolved over time state that: definition of that worked 1980s even 1990s might not work today. as a result probably nobody uses today its authors originally devised it. completely agree with this statement matter fact quote reason stopped was browsing through book though didn t an immediate need actually looking business service but s topic future blog entry. another interesting observation make when initially developed it intended to be used whole application just . however since most developers intuitively layers opposed building monolithic norm role pattern has shifted more than level pattern. do great job explaining simple sequence diagram rather using quintessential chart three circles words inside them. below drawing use book: https://hectorcorrea.com/images/mvc.jpg from easy see upon user action e.g. click button talks turn model. makes me wonder if should called instead. notifies changes occurred reads new what we call logic represents controls are drawn screen. .net represent windows forms or web controls. ideally possible. draw intercept actions forward controller. practice typically some handle things related data binding sometimes validation. there trade-off between having simplest views one no tends involved only place code tens simpler now you two places. neither right nor wrong. decision developer will face choose best given building. above can also take care request made view. main jobs script required calls requires responsible creating passing control triad. does require then scripts existing something keep mind selecting which go next complex real application. nothing intrinsic simpler. common misunderstanding separates point out aforementioned knows directly observer relationship newer derived addressed issue other improvements produce suitable applications. andrea: sharp bold it: classic gone. variations healthy thrive. model2 both windows. recently undergone facelift. july 2006 martin fowler proposed retire entirely replace passive pv supervising svc 2: again adapted medium wasn around at first created java server pages asp.net framework http://www.asp.net/mvc/ relevant developers. review differences let look model2: https://hectorcorrea.com/images/model2.jpg couple become evident soon compare reviewed first. thing little bit complicated components involved. secondly still embedded shown very 1 anything 2 quite different mvc. becomes means much set based information viewmodel passed class dataset custom render html remember targeted web. case receives access although subtle difference goals frameworks framework. so elements introduced browser front users indicates submit http post requests html. implemented via module captures analyzes decides scott gu good works http://weblogs.asp.net/scottgu/archive/2007/12/03/asp-net-mvc-framework-part-2-url-routing.aspx mentioned before variation superseded worth exploring beyond scope their book. highly recommend anyone doing while. well known modern perspective development. addition msdn article http://msdn.microsoft.com/en-us/magazine/dd252940.aspx checking out."
	},{
		"id": "/blog/2009-01-13/rubber-band-reports-with-pivot-tables-reprint",
		"name": "Rubber Band Reports with Pivot Tables (reprint)",
		"text": "rubber band reports with pivot tables reprint img align left width 120 src https://hectorcorrea.com/images/pivottable.jpg / a few years ago i wrote an article for the now defunct universal thread magazine on how to create using excel s tables. was titled programming and showed from visual foxpro vfp application. although is more than 6 old still get questions every then about code samples that mentioned in article. original can be found here https://hectorcorrea.com/downloads/correa pivottablesvfp.zip vb.net version of at https://hectorcorrea.com/downloads/pivottable.zip pdf also https://hectorcorrea.com/downloads/correapivottableswhitepaper.pdf ."
	},{
		"id": "/blog/2009-01-07/expose-your-data-as-an-rss-feed-with-net-3-5",
		"name": "Expose your data as an RSS Feed with .NET 3.5",
		"text": "expose your data as an rss feed with .net 3.5 in talking my one of friends http://geekswithblogs.net/thecodemonkey/default.aspx a couple months ago i found that now has built-in classes to generate feeds. this was great news me since both personal blog site and the dotwiki https://hectorcorrea.com/blog/dotwiki-2-0/25 feeds but for longest time ve been using unsupported library downloaded from web years ago. last month updated use these new instead old recent changes wiki topics feed. although rather comprehensive had hard finding good practical examples on msdn how them sup 1 /sup . lucky bipin joshi posted two http://www.dotnetbips.com/articles/4826711c-3f25-48ef-94d0-5c40b628c203.aspx consume http://www.dotnetbips.com/articles/addaf09f-9b6b-45d2-aba8-da11f23aa53e.aspx classes. below is code looks like list 24 hours. complete available follow source links page system.servicemodel.syndication // define syndicationfeed feed.title textsyndicationcontent feed.copyright copyright c 2008. all rights reserved. feed.description ... link represents syndicationlink link.title link.uri uri http://code.hectorcorrea.com/dotwiki/ feed.links.add load items we want more feed.items loadblogitems prepare response proper encoding content type response.clear response.contentencoding system.text.encoding.utf8 response.contenttype text/xml dump 2.0 into xmlwriter rsswriter xmlwriter.create response.output rss20feedformatter rssformatter rssformatter.writeto rsswriter.flush rsswriter.close response.end which adds individual shown below. method returns generic syndicationitems each element contains information about topic changed topiclist example are specific rest plain code. private syndicationitem topiclist.getrecentchanges getlatest.last24hours foreach topicinfo topic.gettopic topicinfo.id basic item item.id topic.id.tostring item.title topic.name item.content topic.content item.lastupdatedtime topic.updatedon string url string.format 0 httputility.urlencode item.addpermalink ...and author syndicationperson author.email somebody@somesite.com item.authors.add items.add return generated by seems be fully compatible popular readers bloglines google reader. reading documentation http://msdn.microsoft.com/en-us/library/system.servicemodel.syndication.aspx namespace it there support atom 1.0 addition 2.0. have only tested formatter though. update: actually nice sample under class http://msdn.microsoft.com/en-us/library/system.servicemodel.syndication.syndicationfeed.aspx shows same or"
	},{
		"id": "/blog/2008-12-23/multiple-endpoints-for-a-wcf-service",
		"name": "Multiple Endpoints for a WCF Service",
		"text": "multiple endpoints for a wcf service one of the nice features that windows communication foundation provides is ability to expose single via so different client applications can consume same over network protocols. example be exposed http external clients and tcp internal clients. in an endpoint refers combination address where available binding used communicate it contract exposes these three parameters are commonly known as abc endpoint. represents url found http://localhost:8000/helloworld/helloworldservice or net.tcp://localhost:9000/helloworld/helloworldservice describes transport protocols channel vs functionality maps servicecontract interface your c# code. configured app.config through this post i am going focus on how configure file endpoints. let s assume we have simple hello world implements ihelloworld like shown following code snippet. namespace https://hectorcorrea.com/wcf public operationcontract string greetings yourname datetime thetimeis class helloworldservice : return string.format 0 string.isnullorempty guest datetime.now host you use first line creates object second opens receive process requests service. call host.open will read settings from more later decide what opened rest displays were finally readline put wait state they come. servicehost new typeof theservice.helloworldservice console.writeline has been started foreach serviceendpoint host.description.endpoints address: endpoint.address binding: endpoint.binding contract: endpoint.contract.contracttype please enter close host... console.readline host.close server side configuration xml shows defined . config lives notice theservice.ihelloworld basic ws each them its own url. behaviorconfiguration theservicebehavior name -- 1: basichttpbinding httpendpoint / 2: nettcpbinding bindingconfiguration tcpendpoint 3: http://localhost:8003/helloworld/helloworldservice wshttpbinding timeouts opentimeout 00:30:00 /host /service now helloworld implemented running waiting send turn create console application it. connect proxy called helloworldclient using named then makes couple calls methods closes connection. greetings: service.greetings hector time is: service.thetimeis service.close closed. created before. generate beyond scope see references at bottom information. nutshell skinny version uses forward request across wire actual server. thanks don t write any low level networking stuff deal with since wraps us. looks calling machine client. by just looking no idea if country. do tell find real either file. show keep mind discussed reviewed before also imagine subset exposes. tells while listen requests. config. particular all listed illustration purposes but could well one. definition similar ones contract. yet defines settings. httpbindingparameters helloworldproxy.ihelloworld tcpbindingparameters wshttpbindingparameters wshttpendpoint /client matches indicated when executed values open recognizes messages after automatically forwarded our up listening i.e. expected result. change changing endpoint: little instead remains unchanged mentioned beginning typical scenario great book learned most information blog learning http://www.amazon.com/learning-wcf-hands-michele-bustamante/dp/0596101627 michelle leroux bustamante want two good msdn link http://msdn.microsoft.com/en-us/library/ms733133.aspx miguel castro article manually http://www.devx.com/codemag/article/39837/0/page/1"
	},{
		"id": "/blog/2008-11-30/flickr-library-in-c-sharp",
		"name": "Flickr Library in C#",
		"text": "flickr library in c# the last few days i ve been working on a sample to access pictures using s own api. this is light-weight class that provides two basic features: 1 retrieve list of photosets your account and 2 information about photos photoset. you can display them combobox with lines code like these: new yourapikey youruserid photosetinfo flickr.getphotosets cbophotosets.datasource cbophotosets.datatextfield title cbophotosets.datavaluefield photosetid cbophotosets.databind once select photoset inside it url following code. example am binding an asp.net datalist control them: photoinfo flickr.getphotosinset cbophotosets.selectedvalue listphotos.datasource listphotos.databind lblphotosmsg.text photos.count 0 no : api supports multiple requests response formats. rest format for responses my flickrlib library. typical request looks this: http://api.flickr.com/services/rest/ method methodname amp param1 value1 param2 value2 where name call flickr.photosets.getlist return photosets. provide are xml documents pertinent request. would be document node several children nodes. these very easy parse linq turn into strong-typed objects which then bound .net classes. exactly what does wrapper functionality so easily consume from applications. references download source here https://hectorcorrea.com/downloads/flickrlibdemo.zip . flick visit http://www.flickr.com/services/api/ there lot how use it. tons features might find useful little not expose. will need obtain key order their through or any other class. free but needed prevent single user submitting too many site take down."
	},{
		"id": "/blog/2008-11-11/devconnections-2008",
		"name": "DevConnections 2008",
		"text": "devconnections 2008 below are the brief notes that i took while at in las vegas november/2008 this blog entry is mostly bullet points of things found interesting without much details. ll elaborate on some these topics future entries. tuesday november 11th opening keynote scott gu started with an overview new features released last year which included: dynamic data access to build a database application wizard charting controls for asp.net mvc - tdd friendly closer metal html programming model not everyone several silverlight demos then he went describe coming visual studio 2010 and 4.0 s ui will use wpf rather than windows form better support release deployment e.g. multiple web.config files one each environment documentation integration tfs work items native sharepoint workflow distributed caching apps look project velocity net continuum web desktop ria chris hammond has very nice summary session. entity framework world services processes .edmx generated ef serializable by default makes it compatible wcf out box. context equivalent connection gotcha: you need enumerate linq results before passing them back if as should surround your using statement code var from x ctx.blogs select y return blogs.toarray // end my opinion seems unfinished. although really easy ready object interface save inserts updates looks complicated. hacks were needed data. problem stem fact good understanding state but inferring intent. currently all operations apply entire graph there no way make more granular. be worked version 2. ado.net sets formerly known astoria accessible through http via rest approach. approach intent inferred url. soap uses lots verbs few put/get/post/delete nouns. so what hanselman gave presentation describing provides does when compared traditional forms. first thing clarified greater or webforms. secondly both approaches here stay. they target different audiences. forms hides developer adds subsystem html. type asp.net. gives control over lends easier test everyone. unlike webforms event button click page postback viewstate lifecycle. we lose many isn t like going classic asp was separation concerns lumped single wasn test. can mix match site. typical url follows format: http://controller/method/methodparameter example: http://products/retrieve/3 name comes view controller pattern. sites c interact m get views v . enforces clear between example know anything about job view. model. used own third party views. showed kind product called nhaml quite webform constructing page. everything speakers tour flavors query variety sources. slides http://blogs.msdn.com/aconrad/ objects mechanism objects. sql functionality targeting server only entities higher level abstraction includes modeling models supports backend plug-ins available point dataset don los investment datasets microsoft flavor. tag line is: having say re sorry offline extra joins xml lightweight api lighter dom. classes aware. xdocument aware old xmldocument. generate documents xdoc xelement contacts where country south africa vb.net directly regular vb add quotes embed expressions similar embedded rendered runtime produce final xml. cool. too bad have c#. allow publish rest-based any client consume them. http:/localhost/myservice.svc/customers alfki /orders retrieve orders customer key linq. cloud sources pdc earlier unveiled two : azure insert custom provider write source friendly. must implement iqueryable iqueryprovider. main challenges 1 translate language 2 transform demo twitter implementation. implementing restful 3.5 sp1 www.robbagby.com 1993 content today capabilities. linked resources. resources fixed set architectural style specification play well honor response codes other applications run web. proven why continuing it. binding webhttpbinding envelope webget webinvoke attributes. starter kit codeplex three components: dll microsoft.servicemodel.web.dll templates samples. rob suggested four our provide: appropriated chose representation 3 provide addressability 4 valid codes. fully supported attribute responseformat parameter uritemplate webprotocolexception class. wednesday 12th two: making leap came late session part interesting. speaker richard campbell honest start host application. load balancing improve reliability scalability necessarily into performance. resistant hardware faults users won become faster. nlb overhead processing request especially affinity. tell cluster drain let finish whatever requests/sessions take requests. expected affinity used. draining hours since sessions expire immediately could keep submitting requests same machine free up until been closed expired. marked saved cache. because stored proc. important information minimal storing process. stores memory. twice fast failure. store prevent parties worth considering. recommends create go way: testing clusters sure large time spans 10-15 minutes least realistic picture. detects goes down detect iis becomes non-responsive. paid durable juval lowy talking pass band parameters header request. identify who call instead method forth. bindings feature word basichttpcontextbinding. wrapper breeze. download his site: http://idesign.com after explaining moved talk sessions. how most client/server implicit assumption short milliseconds assume ok duration fall days. clients may come hosts move machines. long running cannot service memory times persist identifier pull correct persistent storage. basic ways around. every ugly introduces infrastructure business methods. values server. preferred change static side thread safe i.e. lock durableservice mark methods durableoperation completeinstance true indicate completes done completed caller. once recreate required. examples file simple. provider. under folder scripts database. towards demoing transactional cool got lost process clear. idea transactions happen execute exception happens basically decide changes committed. building router michelle leroux bustamante talked route messages. kinds routers: pass-through routers routers. far advanced attended conference. even though did great topic waaaaay understand. she described reasons might want router. routing serve software balancer typically practical cheap days also do based message strict sla best servers something solution couldn provide. useful online/offline scenarios. considerations receives forwards its none. security accepted a. however implements reject indicates originally smart enough receiving another issue now see somebody tampered original headers. explained address issues functionality. transport protocols tcp. none trivial uneducated me nevertheless possible wcf. general turn security. couple working realize off. deal described. showing messages would forth depending algorithms including round robin body. dino esposito presented introduction sql. operates read layer top connections readers such. specific. vendors future. c# attributes table/column represent partial extend logic. relationships tables implemented composite provided customer.invoices 0 .duedate invoice.customer.firstname datacontext class tracks changes. short-lived recreated open hit detected. n-tier applications. mentioned yesterday addressed v2.0 framework. curious queries syntax lot updated populate specific submitchanges push ve reading procedure perform kludgy. whole concept clone attached just right. am seem extremely awkward ef. lazy loading aka deferred instantiation children collections customer.orders.count zero. had trying force update property didn field ideas eye on. knew csla rockford lhotka stuff around mature product. suppose value their current state. thursday 13th high performance computing hpc nick landry scenarios user needs submit massive handle number users. super computer network cluster. calculate stock projections. calculating projection intensive gets worse projections portfolio client. case 100 stocks submitted machines job. compute runs http://microsoft.com/hpc hcp batch jobs command line. allows jobs. plus pack. pack licensed cpu offer cheapest products setup head node join existing scheduler knows .net libraries getprojectionsforallmystocks broken tasks per parallel. productive focused plumbing underneath. wcfsvchost.exe code. library project. /client fire time. wcftestclient.exe program particular instrumentation. counters monitor services. config servicemodel perfmon would. tracing logging. illusion care details returnvalue else display reality little error telling app already exception. ones. logging configuration tool diagnosis. auto-flush stop debugger middle activity id checkbox refers logical across tiers et cetera. traceviewer utility automatically merge log id. overloading. modify proxy overloading tagging attribute. alias int addint float addfloat. datatables. platforms bound schema. arrays fault debugging. bubbled throws throw faultexception exceptiondetail include detail work. catch addition generic jquery rick strahl conceptually sense document returns api. popular 100s pretty small: 16kb. css selector dot pound sign ids"
	},{
		"id": "/blog/2008-11-10/managing-and-leading-the-one-thing",
		"name": "Managing and Leading (The One Thing)",
		"text": "managing and leading the one thing img align left src https://hectorcorrea.com/images/onething.jpg / a few years ago my friend bill from rebar business builders http://rebarbusinessbuilders.com recommended me book you need to know...about great sustained individual success http://www.amazon.com/one-thing-you-need-know/dp/0743261658 by marcus buckingham. for while i hesitated buy this initially title about kind of put off but ended up buying it reading it. back then knew had enjoyed until recently didn t realize how much took first that helped clarify was difference between leading. not only are these two roles talents needed perform them different they opposite. points main focus managers his/her employees leaders is better future. here puts in regards management p. 83 all know this: discovery what unique each person capitalize on regard leadership 132 every leader knows he must do is: discover universal provides several examples see people as an end unto themselves derive satisfaction seeing tiny increments growth someone else . their serve find care situations where shine. will go above beyond rearrange world take advantage employee s strengths. turn tends drive productivity teams which why companies managers. most important allow role ability coach perceive differences. other hand have role. well when way make many regardless uniqueness excited confident future tend be fascinated believe takes optimism ego. because convinced can overcome present challenges there something. opposite pessimistic. ego get there. humble assessment own abilities -- yet does mean brash or abrasive matter fact quite reserved. 66-68 agile blog david anderson has interesting post lead prosper http://www.agilemanagement.net/articles/weblog/leadwellandprosper.html echoes some thoughts leadership. think having clear idea very software development particularly developers start getting promoted positions expected and/or manage. company expectation senior developer should do. sure your skills position enjoy best team. good at vice-versa. both either. something applies peers report also to. goes far claim born made p 69 bases with learn. am agree disagree his statement uncomfortable thought wrong. general highly recommend into positions."
	},{
		"id": "/blog/2008-10-04/introduction-to-scrum",
		"name": "Introduction to Scrum",
		"text": "introduction to scrum img align left src https://hectorcorrea.com/images/codemayjune2008.jpg / my article https://codemag.com/article/0805051/introduction-to-scrum has been published in the may/june 2008 issue of code magazine https://codemag.com/magazine/issue/mayjun2008 . as i said this article: is an agile process manage software development projects. not prescriptive on engineering practices but rather it a lightweight framework based few common sense guidelines for managing dedicated development. jeffrey palermo interesting projects https://codemag.com/article/0805041/managing-an-agile-software-project that starts with quite line: everything right or wrong project management s fault jeff then goes talk about fallacy fixed scope unspoken quality variable hiring and firing customer other areas where needs act how done project. jean-paul s. boodhoo provides list 16 steps https://codemag.com/article/0805021/individuagility improve your skills using techniques are particularly like his approach trying these little by little. example start doing unit testing get comfortable evaluate test driven tdd scott bellware talks behavior-driven https://codemag.com/article/0805061/behavior-driven-development bdd : often specifically design units modules such classes. also concerned its focus addresses much broader range concerns he misunderstanding while fact design. all issue."
	},{
		"id": "/blog/2008-09-16/skeletons-mona-lisa-and-problem-solving",
		"name": "Skeletons, Mona Lisa, and Problem Solving",
		"text": "skeletons mona lisa and problem solving one of the best practices when building applications that i ve learned over years is value always having a running version application available to show end-to-end progress on system being developed. although this common sense it s easy get caught day-to-day activities lose track these things. typical situation in which teams seem forget writing brand new application. scenario have bunch components half-way written not ready for production most development tend be ok with this. am as long they all compile can run successfully functionality implemented so far . does matter only perform sub-set features final will have. should people experience first hand how each modules interact other. walking skeleton img alt align left src https://hectorcorrea.com/images/skeleton.jpg / trying explain concept friend mine found there even pattern explains idea comes applications. cockburn sup 1 /sup calls http://alistair.cockburn.us/index.php/walking : tiny implementation performs small function. need use architecture but link together main architectural components. then evolve parallel. points out different from proof or spike later meant throw away code while time. approach relies heavily procedure place support evolution fleshed pun intended. strategy incremental rearchitecture. recommend unit testing make sure some basic today remains fully functional tomorrow few are updated accommodate ideas. https://hectorcorrea.com/images/monalisa.jpg his article neglected practice iteration https://www.stickyminds.com/article/neglected-practice-iteration jeff patton talks about difference between iterating incrementing no synonyms touches angle. uses drawing describe differences an iterative software development. if we were pure would start by perfection section painting say her hands ll draw completely arms face forth. using sketch pencil our do second increment detail perhaps give coloring third put keep painting. has great images graphically. point you both iterations increments lot thing two words work single module before moving next module. disadvantage neither user nor developers see complete picture until complete...and usually too late. users rough whole early relates depth-first versus breadth-first their book lean poppendiecks 2 talk ways solve problems: breadth-first. might thought funnel more like tunnel. involves delaying commitments invokes making commitments. similar aim incrementally update its known domain. think approaches complimentary just are. times where preferred vice-versa. words: notice require expertise was correct selection area zero on. getting right requires things: someone decisions correctly assurance any changes render obsolete. lacking conditions lead better results. observations made novice designers biased toward approach. irony decision something designer definition probably won t do. further believe bias reason apply instead than knowledge business domain expected typically also very effective stable e.g. strong again poppendiecks: understand details likely emerge savvy know time arrived. however choice evolve. stable. personality types play big factor way important consideration since your team favor ok. remember complimentary. once enough commitment go deep. references alistar. crystal clear human-powered methodology 2005. addison wesley. pages 49-53. poppendieck mary et al. agile toolkit 2003. 60-62."
	},{
		"id": "/blog/2008-09-11/static-constructors-and-asp-net-applications",
		"name": "Static constructors and ASP.NET applications",
		"text": "static constructors and asp.net applications a few days ago i was running into an issue with class in application. the thought that constructor not being fired. it turns out fired as should but often would be. constructs are once per app domain. windows application this means is every time launch access class. if close run again hit will be again. web also case does translate to re-open browser. closing browser re-launching terminate re-launches it. here simplified example of scenario ran notice count 0 constructor: code public staticclass int get return partial default : system.web.ui.page protected void page load object sender eventargs e // print lbltext.text string.format staticclass.count very first prints 1. refresh 2. what you expect guessed 1 wrong like did. 3. rid since apparently domain still under iis. really want force reset counter need kill worker process iis e.g. iisreset hindsight obvious one my co-workers pointed we lucky apps work suck big user closed their well next pay time. moral story keep mind don t have much control on when guarantee accessed includes after loaded recycled your goes away new visits site. all good desired effect just mind."
	},{
		"id": "/blog/2008-09-03/computer-museum-paris",
		"name": "Computer Museum (Paris)",
		"text": "computer museum paris posted on 2008-09-03 updated 2024-09-12 in 2008 i had the opportunity to visit paris. musee de l informatique https://fr.wikipedia.org/wiki/mus c3 a9e 27informatique 28la d a9fense 29 a neat variety of computers display that range from 1960s mainframe early personal models ibm apple commodore 80s and other related stuff including punch cards old hard drives mother boards software name few. sadly it seems closed 2010. here are few pictures took while was there. first things first: 1960 s mainframe. big cabinet left with bunch yellow wires below clock is memory bank: 32k ram right cpu. need remember this picture next time complain my laptop too heavy https://hectorcorrea.com/images/mainframe.jpg pc almost identical owned. check out two not one floppy : https://hectorcorrea.com/images/ibmpc.jpg also saw computer. they didn t have 64 which very used but reminded me lot those days. https://hectorcorrea.com/images/commodore.jpg course for you who started dark side there an ii. ii https://hectorcorrea.com/images/apple.jpg walk down lane: sidekick anyone ve got admit no better way edit turbo pascal 3.0 code than terminate stay resident editor like sidekick. high tech circa 1985. https://hectorcorrea.com/images/software.jpg dos developer cartoon https://hectorcorrea.com/images/cartoon.jpg disks drive https://hectorcorrea.com/images/harddrive.jpg floopy https://hectorcorrea.com/images/floppies.jpg see if interested kind post valencia https://hectorcorrea.com/blog/2024-09-12/computer-museum-valencia ."
	},{
		"id": "/blog/2008-07-27/dotwiki-2-0",
		"name": "DotWiki 2.0",
		"text": "dotwiki 2.0 i ve posted a new version of the that introduced back in 2004 building wiki web sites with asp.net and sql server http://www.codemag.com/article/0403081 article code magazine. this is complete rewrite using c# it has several features more attractive look feel. security probably most important feature since had been by far commonly requested released original 2002. previous versions updates to vb.net felt full was order clean up remove unused reflect what learn release add few features. doing exclusively for last years took plunge rewrote c#. implemented membership provider. s amazing how easy secure site built-in creating users resetting your password logging out such. also uses rockford lhotka csla http://www.lhotka.net/cslanet/default.aspx business objects framework. read write data are typical objects. you don t need know much if anything about understand yet helps me tremendously keep logical tiers. still fckeditor http://www.fckeditor.net/ provide see get wysiwyg experience user. updated use 2.6 which supports safari browser. am continuously amazed on free stuff there applications good is. fantastic middle tier object framework open source. integrates seamlessly comes all javascript source code. provider part .net design starter kits have always free. itself hope developers find as useful or versions. update february/2015 no longer maintain support dotwiki. however available download at following links: latest https://hectorcorrea.com/downloads/dotwiki.zip https://hectorcorrea.com/downloads/dotwiki vs2005.zip"
	},{
		"id": "/blog/2008-02-25/upgrading-your-software-development-tools",
		"name": "Upgrading Your Software Development Tools",
		"text": "upgrading your software development tools late last year november 2007 to be exact microsoft released visual studio 2008 http://msdn2.microsoft.com/en-us/vs2008/default.aspx with .net 3.5 production. this has generated a lot of buzz around the new features what s hot you should looking into and so on. beta cycle for vs was long very public. there been articles access while but now it here real. people can go buy today or download from msdn. teams that have just wondering how about upgrade need answer question: do we most developers are technology driven love technologies. seems personality trait regardless chose. desire move latest greatest version as strong in foxpro vb 6 nineties. crave day when use tools. yet responsibility our users doing responsibly. upgrades hard perform on medium large systems number like things these kinds planned order give customers. although decision not is specific every project i usually tend recommend on-going projects actively being developed thinking twice before switched maintenance mode no developed. why would want if updating options environment takes time money even consider fact available hardly enough reason team stop developing spend days/weeks performing retest system then continue development. some benefit customer an make sense. come benefits realistic will short term version. wary magic one common mistakes promise themselves others productivity increase incredibly tool. application magically half look much better than because wpf foolish. assuming windows workflow engine 3.0 solve all issues never used also poor assumption. get learn really works does not. case ton apply wide variety projects. made more ago finally easy us. provides awaited designers ajax wcf linq name few. technologies indeed help responsive provide communication other applications such. process tool varies two main guidelines ve found useful. try first test ample i.e. don t week going second entire only source code deployment affected third party upgraded well my experience tests testing always work out glaring reviews. show up once system. necessary covers small portion e.g. pitfalls might those areas later. sort catch-22 initial idea won good until evaluate range et cetera hold breath -- still run app upgraded. c est la vie. did tremendous by allowing target 2.0 runtime. huge advantage take since allows them ide keep runtimes same. runtime incorporate little little. example possible forms same which means rewrite user interface one. existing at become comfortable plan migrate rest wpf."
	},{
		"id": "/blog/2008-01-09/estimates-on-software-projects",
		"name": "Estimates on Software Projects",
		"text": "estimates on software projects is one of the most controversial topics development including process to calculate them and value that they add process. every team i have worked with needs provide how long it s going take complete a specific feature system. yet teams seem struggle this activity. developers enjoy attending meeting as much visiting dentist. project owners typically complain unreliable are unbelievable even been writing for many years cannot give accurate estimates. in my experience there several reasons why providing so hard: poor specifications/lack domain knowledge technology challenges optimistic tough specifications commonly voiced reason inaccurate good reason. typical be asked estimate features don t fully understand. client requests new screen do x but lot unwritten expectations users will demand once start using know about. usually due lack business knowledge. trained very little or nothing domain. if being written insurance billing unlikely enough education training and/or accounting. might working first time faced purposes. when decent amount conversation between analysts product place explore what requested entail inevitable things left unsaid find out developed presented user. ve companies where we received reams paper looked like covered possible detail about built just 1 still incomplete 2 really represent customer wants. produced fair share specs thought were nope not discovered until feedback. groups try stay up date upgrade versions compilers databases environments such. thing since these tools meant speed make better use existing hardware. cost associated upgrades. need spend performing upgrades learning ways doing cheap. plus happens regular basis. example 2000 microsoft has released three c# 2.0 2005 3.0 2007 during same sql server 2008. you may tempted say heck update anymore also this. your system run computers look ugly e.g. imagine dos application running windows. secondly tend driven lose some best see falling behind their skills date. met myself included by nature. people please our customers. an impact provide. case scenario tells us hardly ever materializes development. account unexpected way. brooks mythical man-month p. 15 assumption all go well probabilistic effect schedule. requires dealing abstractions unknowns tight schedule technologies. activities deal physical limitations size weight counts other understood constrains. hand deals almost pure thought-stuff 7 unconstrained environment trivial. yes definitively do. despite grim picture painted far strongly believe valuable projects. price tags sense allow decisions comes deciding priorities project. four week each fourth looks two months alone owner able decide product. she one-week delay large vice-versa. decision having idea features. can get accurate. divide conquer. small blocks functionality off either. task estimated days takes twice later adjust planning. however probably too late address problem. more blow whatever likelihood blowing estimate. second constantly calibrate expectations. put bluntly realistic history guidance stuff completed rather than guided hope. common quot took me weeks now would only next time. works out. remember optimistic. bound posture. something it. should number baseline future reduce proven done half much. koskela howell great http://www.leanconstruction.org/pdf/obsoletetheory.pdf which propose moving away from thermostat model arbitrary productivity goal set at onset into scientific experimentation based previous results. approximations promises prefer light approach spending whole them. mean getting together no 3 hours think accomplish weeks. come relatively short term. david anderson tongue-in-cheek post he calls stop estimating http://www.agilemanagement.net/articles/weblog/stopestimating.html . reality agile http://www.agilemanagement.net/articles/weblog/agileestimating.html all. methods spent calculating guarantee. producing delivering user promises. mike cohn book planning http://www.amazon.com/agile-estimating-planning/dp/0131479415 subject. does way describing story points velocity term highly recommended joel spolsky article evidence-based scheduling http://www.stickyminds.com/bettersoftware/magazine.asp fn cifea amp id 94 ebs uses monte carlo simulation particular met. sounds interesting tried myself. fact historic values probabilities promising. am afraid effort provides any missed worst. taboo. although everybody misses nobody wants talk over happens. let bring down. review act findings. perhaps complicated -- perfectly ok admit maybe break down smaller chunks less distractions. sure longer expected similar task. tell yourself because before. remember: somebody else paragraph. was expect 5 take. forecast. instances individual developer shot larger issues addressed. team/developer right job qualified always team/individual valid questions pace expects. problem both. role learn effectiveness few cycles. necessarily feedback after rounds use. different experiences personality styles useful setting"
	},{
		"id": "/blog/2007-12-13/the-scrum-daily-meeting",
		"name": "The Scrum Daily Meeting",
		"text": "the scrum daily meeting we use at office to manage our projects. one of key practices is or http://www.controlchaos.com/about/management.php . a short 15 minutes in case held every day same time with whole team product owners qa and developers. goal keep everybody informed progress since last make sure there are no roadblocks. rules for simple: must be time-boxed member report what have you done will do from now until next any roadblocks preventing move on most projects remote participants i used show spreadsheet sprint backlog projector their status. was shared real users updates were seen by everybody. this nice idea it kept all local involved meeting. however approach had huge disadvantage: focus became rather than status team. developers tended very mechanical when reporting they next. common people say take 3 hours down line 25 4 28 describing did e.g. worked problem that prevent outside domain logging in. year decided stop using meetings. still get together but instead looking some bring notepad list things while others memory. little change has made difference meetings much more conversational ever were. central look peers spreadsheet. moved away been easier where gets s going project. really talk about doing just taking tasks. example during need describe working bug login process saying 20 track number remaining items"
	},{
		"id": "/blog/2007-11-10/windows-presentation-foundation",
		"name": "Windows Presentation Foundation",
		"text": "windows presentation foundation i ve been reading about wpf for a while and at devconnections http://www.devconnections.com/ this week attended few sessions on the topic to day still have mixed feelings new technology. one hand am really excited see work done smart clients user interface in windows. fact that takes into account graphics hardware available most machines these days is nice. uses direct x instead of gdi render images display which turns faster rendering even more complex uis. expression blend product targeted designers also nice addition hopefully will help developers ui together resulting better applications user. other disappointed microsoft has lowered abstraction layer raising it. seen focuses how easy it do buttons gradients nested controls stack panels such. gosh s not very productive. eager provide polished interfaces our users but cannot believe year 2007 we are attending controls. wish ms had provided much richer environment top basic functionality they created. lack data grid another issue struggle with. allow you create your own bind why that. isn t there native vs 2008 beyond me. fortunately lot third parties filling vacuum providing grids some them least now free. pleased can mix match classic forms with same application. would us start migrating paradigm slowly rather than starting from scratch."
	},{
		"id": "/blog/2007-10-30/software-developers-and-process-improvement",
		"name": "Software Developers and Process Improvement",
		"text": "software developers and process improvement one of the topics that i ve been noticing for a while is how we as tend to worry about our development try educate ourselves on topic other project stakeholders don t seem show much interest it. example often talk who are trying implement scrum rup or at their companies they fell executives business owners analysts not interested in should. it seems s always drive these initiatives. most interesting part however an activity should be left alone even when process. if has impact bottom line company usually does done collaboration with qa developers. well intended might see whole picture bound make one-sided conclusions. bill buxton https://businessofsoftware.org/2007/10/an-angry-mans-s/ says: typical approach engineers having sole responsibility new product like ice hockey team all goalies. no matter good your goalies aren going beat bad proper mix players. my co-coworkers had great idea taking couple local agile user group both seemed have enjoyed learned few things. yet was only time attended meetings. given books lean some moderate success. although read fails spark ideas what else doing. from seen there several reasons why non-software pay attention should: just small job. deal because e.g. needs help creation x but real goal necessary evil. people care too where piece every conversation inevitably turns into discussion tools geeky issues feel lost. think anything wrong existing problems thing way is. haven realized could participate best doing so. this open invitation users jump company. members you others can do develop better get more often."
	},{
		"id": "/blog/2007-06-28/the-mythical-man-month",
		"name": "The Mythical Man-Month",
		"text": "the mythical man-month last week i finished reading http://www.amazon.com/mythical-man-month-software-engineering-anniversary/dp/0201835959 by frederick brooks for third or so time. although this book was originally published in 1975 it is still a great anyone involved software development. edition that read 20th anniversary and has few extra chapters with updated information. there are two particularly like book: no silver bullet - essence accident. chapter explains why using as unit measuring size of job dangerous deceptive myth. implies men months interchangeable. he goes on to explain interchangeable commodities only when task can be partitioned among many workers communication them. true reaping wheat picking cotton s not even approximately systems programming myth typical problem our industry. cannot enumerate how times we ve estimated take x number y developers say 6 2 then somebody come but if give you twice people ll finish half time right 3 4 developers. hardly ever works out. having more team bad comes price productivity mainly due work allocation happen members. logical tendency underestimate burden because tend see men/women months. most projects rather small 5-10 members compared worked hundreds managed ibm os/360 group back sixties. yet law adding manpower late project makes later applies smaller projects. accident actually reprint from an article wrote 1986 ten years after original been added edition. declares next decade 1986-1996 will major technological managerial development improve one order magnitude. a-la aristotle divides difficulties face develop accidents: essence- inherent nature -and accidents- those today attend its production inherent. mind kinds tasks development: essential accidental tasks. ones which abstract constructs trying solve programs. do implement these languages machine code. advances have happened helped us performance address e.g. higher level faster smarter compilers better ides. however little done carry hence improved building inherently difficult. industry while probably seen shortage bullets wannabes. who forget about case tools artificial intelligence expert let uml unified process. blog entry does try diminish progress had over years. incredibly nowadays takes lines code what used thousands just decades ago. they addressed part equation. gems said at beginning highly recommend brook writings also his other design https://hectorcorrea.com/blog/the-design-of-design/40 ."
	},{
		"id": "/blog/2007-01-09/thoughts-on-unit-testing",
		"name": "Thoughts on Unit Testing",
		"text": "thoughts on unit testing a test is piece of code written by developer for developer. the intention this to prove that does what intents do pragmatic in c# http://www.pragmaticprogrammer.com/titles/utc2/ . tests are not substitutes requirement gathering or qa they an additional tool developers can use produce better systems. but why would i write such lot complain when first time fell kind silly like there no value writing just wrote. example let s say you new method add record database and then verify e.g. fact added database. suppose spend half your morning its test. well off course it will pass -- wrote darn don t realize gain whole tests: 1. once run object directly without having fire application login launch customer screen click populate some data hit save look if was saved. available need these steps automatically. amazing how much long plus mention manually repeat those redundant every want class. 2. few days later come ever reason have verifiable tell supposed do. might as familiar did days/weeks/months ago. yet tells used 3. something accidentally breaks constrain prevents null field allow nulls way know work now doesn t. won wait user he problems saving customers. sooner rather than later. against ve read classic literature probably thinking committed horrible sins saying my adding aren be independent external components databases isn big no-no talking about same sentence truth two camps issue. one camp says should dependencies components. other thing all has dependencies. guess am second one. see since most us business applications pretty access reading creating updating deleting bite bullet rely after happen related changes structures stored procedures connectivity issues et cetera. pay price slower break even though problem itself. with think worth doing way. mock question martin fowler great article called mocks stubs http://www.martinfowler.com/articles/mocksarentstubs.html describes differences between types helpers ramifications using them. starts pointing out main stubs. state verification while behavior difference approach driven development each techniques brings table. highly recommend his any interested understanding objects. already different from likely very similar testing. little snippets sql scripts utilities find their it. however we usually informally treat throw away code. so instead throwing our make part em real /em keep under source control constant basis maintain reflect start simple. small obvious execute method. particular check chapters development: http://www.amazon.com/test-driven-development-addison-wesley-signature/dp/0321146530 tdd although book get ultimate goal rational behind try right bat. comfortable concept experiment styles tests."
	},{
		"id": "/blog/2006-11-27/binary-tree-in-c-sharp",
		"name": "Binary Tree in C#",
		"text": "binary tree in c# a few months ago i decided write program to handle trees. was lucky still remember some of the basics this data structure from my college days and able add operation code walk hours. make things more interesting also draw on screen. turned out be an challenge kept me busy for weeks. source is here https://hectorcorrea.com/downloads/datastructures.zip . version uses generics so it can used with any type that implements icomparable interface. as indicated wikipedia http://en.wikipedia.org/wiki/binary which each node has at most two children. implement created classes: binarytreenode binarytree former represent while later organize nodes following rules addition third class binarytreedrawer algorithm actually screen let you see how information organized. word caution. although production environments structures are optimize access classes am providing were not implemented performance optimization mind. these meant showcase trees organized internally allow people them demo allows values looks graphically. example below graphical representation generates when added tree: 100 50 150 25 75 12 40 60 90. image https://hectorcorrea.com/images/binarytree2.png random look hundreds them. click https://hectorcorrea.com/downloads/binarytree200nodes.png if want 200 180 kb. luck ll post updated next weeks will include find delete operation. real goal b-trees b kings lot confuse stay tuned. download related posts drawing ruby https://hectorcorrea.com/blog/drawing-a-binary-tree-in-ruby/13 2011 coffeescript https://hectorcorrea.com/blog/drawing-a-binary-tree-in-coffeescript/3 2012"
	},{
		"id": "/blog/2006-05-08/book-review-lean-software-development",
		"name": "Book review: Lean Software Development",
		"text": "book review: lean software development a couple of weeks ago i finished reading http://www.amazon.com/exec/obidos/isbn 0321150783 by mary and tom poppendieck. what great little in this present several tools for their term agile plus an excellent background on why these types methods work. has theory practice manufacturing processes she describes how were/are successfully applied companies like toyota 3m. am usually disappointed when people try to compare other industries e.g. construction buildings because most the times they don t have any field make unfounded simplifications. hand real life experience can between two with realistic examples. authors describe 7 principles rational apply them development: eliminate waste amplify learning decide as late possible deliver fast empower team build integrity see whole is probably well known our industry come accept it good think. some concepts deciding are typically not understood managers developers be seen incompatible development. means that we need premature decisions about should keep options open. allow us only enough information system. example let s say roll out version 1.0 system sure if support undo specific feature. instead guessing locking ourselves into decision expensive one action then evaluate once users use might find actually needed but way had anticipated. so solution ahead time wait until know problem. key able must capacity change unit testing test driven ways account this. addition provide 22 thinking seeing value stream mapping feedback iterations synchronization set-based queue 14 others although large part material presented found books project management scrum 073561993x ken schwaber iterative 0131111558 craig larman includes comparison hard books. motivation behind each lean/agile principle from point view exclusive makes guide involved projects without business owners."
	}];